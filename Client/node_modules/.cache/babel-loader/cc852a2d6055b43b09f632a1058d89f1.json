{"ast":null,"code":"import { deleteAPI, getAPI, patchAPI, postAPI } from '../../apis/Axios';\nimport { imageUpload } from '../../apis/Cloudinary';\nexport const createPost = (data, auth, socket) => async dispatch => {\n  let media = [];\n\n  try {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        loading: true\n      }\n    });\n    dispatch({\n      type: 'MODAL',\n      payload: true\n    });\n    if (data.image.length > 0) media = await imageUpload(data.image);\n    const res = await postAPI('post', {\n      body: data.body,\n      image: media\n    }, auth.token);\n    const newPost = { ...res.data.newPost,\n      user: auth.user\n    };\n    dispatch({\n      type: 'CREATE_POST',\n      payload: newPost\n    });\n    dispatch({\n      type: 'MODAL',\n      payload: false\n    });\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        success: res.data.msg\n      }\n    });\n    if (media.length > 0) console.log('vkl');\n    const msg = {\n      id: res.data.newPost._id,\n      text: 'add a new post!',\n      receivers: newPost.user.followers,\n      url: `/post/${res.data.newPost._id}`,\n      body: data.body,\n      image: media.length > 0 && media[0].url\n    };\n    console.log(msg);\n    dispatch(createNotice(auth, msg, socket));\n  } catch (err) {\n    dispatch({\n      type: 'MODAL',\n      payload: false\n    });\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getPosts = auth => async dispatch => {\n  try {\n    const res = await getAPI('post', auth.token);\n    dispatch({\n      type: 'GET_POSTS',\n      payload: res.data.posts\n    });\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const updatePost = (content, auth, id, profile) => async dispatch => {\n  try {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        loading: true\n      }\n    });\n    dispatch({\n      type: 'MODAL',\n      payload: true\n    });\n    const res = await patchAPI(`post/${id}`, {\n      body: content\n    }, auth.token); // logic\n\n    let newPosts = profile.posts.map(p => p._id === id ? res.data.newPost : p);\n    dispatch({\n      type: 'UPDATE_POST',\n      payload: newPosts\n    });\n    dispatch({\n      type: 'MODAL',\n      payload: false\n    });\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: 'MODAL',\n      payload: false\n    });\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const deletePost = (auth, id, profile) => async dispatch => {\n  const newPosts = profile.posts.filter(post => post._id !== id);\n  dispatch({\n    type: 'UPDATE_POST',\n    payload: newPosts\n  });\n\n  try {\n    const res = await deleteAPI(`post/${id}`, auth.token);\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const likePost = (auth, post, profile, socket) => async dispatch => {\n  // logic\n  if (auth.user._id === post.user._id) return dispatch({\n    type: 'ALERT',\n    payload: {\n      warn: 'Dont like your own post! '\n    }\n  });\n  const newPost = { ...post,\n    likes: [...post.likes, auth.user]\n  };\n  let newPosts = profile.posts.map(p => p._id === post._id ? newPost : p);\n  dispatch({\n    type: 'UPDATE_POST',\n    payload: newPosts\n  });\n  socket.emit('likePost', newPost, newPosts);\n\n  try {\n    const res = await patchAPI(`post/${post._id}/like`, newPost, auth.token);\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const unlikePost = (auth, post, profile, socket) => async dispatch => {\n  // logic\n  const newLikes = post.likes.filter(like => like._id !== auth.user._id);\n  const newPost = { ...post,\n    likes: newLikes\n  };\n  let newPosts = profile.posts.map(p => p._id === post._id ? newPost : p);\n  dispatch({\n    type: 'UPDATE_POST',\n    payload: newPosts\n  });\n  socket.emit('unlikePost', newPost, newPosts);\n\n  try {\n    const res = await patchAPI(`post/${post._id}/unlike`, null, auth.token);\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["D:/Project Web/PROJECT 12 (Only MERN)/Client/client/src/store/actions/postAction.js"],"names":["deleteAPI","getAPI","patchAPI","postAPI","imageUpload","createPost","data","auth","socket","dispatch","media","type","payload","loading","image","length","res","body","token","newPost","user","success","msg","console","log","id","_id","text","receivers","followers","url","createNotice","err","error","response","getPosts","posts","updatePost","content","profile","newPosts","map","p","deletePost","filter","post","likePost","warn","likes","emit","unlikePost","newLikes","like"],"mappings":"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","sourcesContent":["import {deleteAPI, getAPI, patchAPI, postAPI} from '../../apis/Axios';\r\nimport {imageUpload} from '../../apis/Cloudinary';\r\n\r\nexport const createPost = (data, auth, socket) => async (dispatch) => {\r\n    let media = [];\r\n    try {\r\n        dispatch({type: 'ALERT', payload: {loading: true}});\r\n        dispatch({type: 'MODAL' , payload: true});\r\n        if(data.image.length > 0) media = await imageUpload(data.image);\r\n\r\n        const res = await postAPI('post', {body: data.body,image: media}, auth.token);\r\n        const newPost = {...res.data.newPost, user: auth.user};\r\n        dispatch({type:'CREATE_POST', payload: newPost});\r\n        dispatch({type: 'MODAL' , payload: false});\r\n        dispatch({type: 'ALERT', payload: {success: res.data.msg}});\r\n\r\n        if(media.length>0) console.log('vkl')\r\n\r\n        const msg = {\r\n            id: res.data.newPost._id,\r\n            text: 'add a new post!',\r\n            receivers: newPost.user.followers,\r\n            url: `/post/${res.data.newPost._id}`,\r\n            body: data.body,\r\n            image: media.length>0 && media[0].url\r\n        }\r\n        console.log(msg)\r\n\r\n        dispatch(createNotice(auth, msg, socket));\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'MODAL' , payload: false});\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const getPosts = (auth) => async (dispatch) => {\r\n    try {\r\n        const res = await getAPI('post', auth.token);\r\n        dispatch({type: 'GET_POSTS', payload: res.data.posts})\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const updatePost = (content, auth, id, profile) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: 'ALERT', payload: {loading: true} });\r\n        dispatch({type: 'MODAL' , payload: true});\r\n\r\n        const res = await patchAPI(`post/${id}`, {body: content}, auth.token);\r\n\r\n        // logic\r\n        let newPosts = profile.posts.map(p=>p._id===id?res.data.newPost:p);\r\n\r\n        dispatch({type: 'UPDATE_POST', payload: newPosts});\r\n        dispatch({ type: 'MODAL' , payload: false});\r\n        dispatch({ type: 'ALERT', payload: {success: res.data.msg} });\r\n\r\n    } catch(err) {\r\n        dispatch({ type: 'MODAL' , payload: false});\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const deletePost = (auth, id, profile) => async (dispatch) => {\r\n    const newPosts = profile.posts.filter(post => post._id !== id);\r\n    dispatch({type: 'UPDATE_POST', payload: newPosts});\r\n\r\n    try {\r\n        const res = await deleteAPI(`post/${id}`, auth.token);\r\n        dispatch({ type: 'ALERT', payload: {success: res.data.msg} });\r\n\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const likePost = (auth, post, profile, socket) => async (dispatch) => {\r\n    // logic\r\n    if(auth.user._id === post.user._id) return dispatch({type: 'ALERT', payload: {warn: 'Dont like your own post! '}});\r\n    const newPost = {...post, likes: [...post.likes, auth.user]};\r\n    let newPosts = profile.posts.map(p=>p._id===post._id?newPost:p);\r\n\r\n    dispatch({type: 'UPDATE_POST', payload: newPosts});\r\n    socket.emit('likePost', newPost, newPosts);\r\n\r\n\r\n    try {\r\n        const res = await patchAPI(`post/${post._id}/like`, newPost, auth.token);\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const unlikePost = (auth, post, profile, socket) => async (dispatch) => {\r\n    // logic\r\n    const newLikes = post.likes.filter(like => like._id !== auth.user._id)\r\n    const newPost = {...post, likes: newLikes};\r\n    let newPosts = profile.posts.map(p=>p._id===post._id?newPost:p);\r\n\r\n    dispatch({type: 'UPDATE_POST', payload: newPosts});\r\n    socket.emit('unlikePost', newPost, newPosts);\r\n\r\n    try {\r\n        const res = await patchAPI(`post/${post._id}/unlike`, null, auth.token);\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}