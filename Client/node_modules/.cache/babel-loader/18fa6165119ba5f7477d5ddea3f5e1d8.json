{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project Web\\\\Project Web\\\\PROJECT 12 (Only MERN)\\\\Client\\\\client\\\\src\\\\components\\\\util\\\\InfiniteList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getAPI } from '../../apis/Axios';\nimport PostCard from '../post/PostCard';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst InfiniteList = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    auth,\n    post\n  } = useSelector(state => state);\n  const [page, setPage] = useState(1);\n\n  const getData = async () => {\n    setPage(page + 1);\n    const res = await getAPI(`post?page=${page}`, auth.token);\n    dispatch({\n      type: 'GET_POSTS',\n      payload: res.data.posts\n    });\n    console.log(res);\n    console.log('ok');\n  };\n\n  return /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n    dataLength: post.posts.length,\n    next: getData,\n    hasMore: true,\n    loader: /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 21\n    }, this),\n    scrollableTarget: \"list\",\n    children: post.posts.map(post => /*#__PURE__*/_jsxDEV(PostCard, {\n      post: post\n    }, post._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n\n_s(InfiniteList, \"i4zHRBvi4n7P5XXLbXv80lsRntA=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = InfiniteList;\nexport default InfiniteList;\n\nvar _c;\n\n$RefreshReg$(_c, \"InfiniteList\");","map":{"version":3,"sources":["D:/Project Web/Project Web/PROJECT 12 (Only MERN)/Client/client/src/components/util/InfiniteList.js"],"names":["React","useEffect","useState","useDispatch","useSelector","getAPI","PostCard","InfiniteScroll","InfiniteList","dispatch","auth","post","state","page","setPage","getData","res","token","type","payload","data","posts","console","log","length","map","_id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,MAAT,QAAuB,kBAAvB;AAEA,OAAOC,QAAP,MAAqB,kBAArB;AAEA,OAAOC,cAAP,MAA2B,iCAA3B;;;AAEA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AACvB,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAM;AAACO,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAeP,WAAW,CAACQ,KAAK,IAAEA,KAAR,CAAhC;AAEA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,CAAD,CAAhC;;AAGA,QAAMa,OAAO,GAAG,YAAY;AACxBD,IAAAA,OAAO,CAACD,IAAI,GAAC,CAAN,CAAP;AACA,UAAMG,GAAG,GAAG,MAAMX,MAAM,CAAE,aAAYQ,IAAK,EAAnB,EAAsBH,IAAI,CAACO,KAA3B,CAAxB;AACAR,IAAAA,QAAQ,CAAC;AAACS,MAAAA,IAAI,EAAE,WAAP;AAAoBC,MAAAA,OAAO,EAAEH,GAAG,CAACI,IAAJ,CAASC;AAAtC,KAAD,CAAR;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYP,GAAZ;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACH,GAND;;AAQA,sBACI,QAAC,cAAD;AACI,IAAA,UAAU,EAAEZ,IAAI,CAACU,KAAL,CAAWG,MAD3B;AAEI,IAAA,IAAI,EAAET,OAFV;AAGI,IAAA,OAAO,EAAE,IAHb;AAII,IAAA,MAAM,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJZ;AAKI,IAAA,gBAAgB,EAAC,MALrB;AAAA,cAOKJ,IAAI,CAACU,KAAL,CAAWI,GAAX,CAAed,IAAI,iBAChB,QAAC,QAAD;AAAyB,MAAA,IAAI,EAAEA;AAA/B,OAAeA,IAAI,CAACe,GAApB;AAAA;AAAA;AAAA;AAAA,YADH;AAPL;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH,CA9BD;;GAAMlB,Y;UACeL,W,EACIC,W;;;KAFnBI,Y;AAgCN,eAAeA,YAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { getAPI } from '../../apis/Axios'\r\n\r\nimport PostCard from '../post/PostCard'\r\n\r\nimport InfiniteScroll from 'react-infinite-scroll-component'\r\n\r\nconst InfiniteList = () => {\r\n    const dispatch = useDispatch();\r\n    const {auth, post} = useSelector(state=>state);\r\n\r\n    const [page, setPage] = useState(1);\r\n    \r\n\r\n    const getData = async () => {\r\n        setPage(page+1);\r\n        const res = await getAPI(`post?page=${page}`, auth.token)\r\n        dispatch({type: 'GET_POSTS', payload: res.data.posts})\r\n        console.log(res)\r\n        console.log('ok')\r\n    }\r\n\r\n    return (\r\n        <InfiniteScroll\r\n            dataLength={post.posts.length}\r\n            next={getData}\r\n            hasMore={true}\r\n            loader={<h4>Loading...</h4>}\r\n            scrollableTarget=\"list\"\r\n        >\r\n            {post.posts.map(post=>(\r\n                <PostCard key={post._id} post={post} />\r\n            ))}\r\n        </InfiniteScroll>\r\n            \r\n        \r\n    )\r\n}\r\n\r\nexport default InfiniteList\r\n"]},"metadata":{},"sourceType":"module"}