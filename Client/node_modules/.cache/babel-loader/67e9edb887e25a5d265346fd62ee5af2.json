{"ast":null,"code":"import { postAPI, getAPI, deleteAPI } from '../../apis/Axios';\nexport const createProject = (auth, body) => async dispatch => {\n  try {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        loading: true\n      }\n    });\n    const res = await postAPI('project', body, auth.token);\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const deleteProject = (auth, id) => async dispatch => {\n  try {\n    const res = await deleteAPI(`project/${id}`, auth.token);\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getOwnProjects = auth => async dispatch => {\n  try {\n    dispatch({\n      type: 'LOADING_PROJECT',\n      payload: {\n        loading: true\n      }\n    });\n    const res = await getAPI('project', auth.token);\n    dispatch({\n      type: 'GET_OWN_PROJECTS',\n      payload: res.data.codes\n    });\n    dispatch({\n      type: 'LOADING_PROJECT',\n      payload: {\n        loading: false\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getShareProjects = auth => async dispatch => {\n  try {\n    dispatch({\n      type: 'LOADING_PROJECT',\n      payload: {\n        loading: true\n      }\n    });\n    const res = await getAPI('project', auth.token);\n    dispatch({\n      type: 'GET_SHARE_PROJECTS',\n      payload: res.data.codes\n    });\n    dispatch({\n      type: 'LOADING_PROJECT',\n      payload: {\n        loading: false\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["D:/Project Web/Project Web/PROJECT 12 (Only MERN)/Client/client/src/store/actions/projectAction.js"],"names":["postAPI","getAPI","deleteAPI","createProject","auth","body","dispatch","type","payload","loading","res","token","success","data","msg","err","error","response","deleteProject","id","getOwnProjects","codes","getShareProjects"],"mappings":"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","sourcesContent":["import {postAPI, getAPI, deleteAPI} from '../../apis/Axios';\r\n\r\nexport const createProject = (auth, body) => async (dispatch) => {\r\n    try {\r\n        dispatch({type: 'ALERT', payload: {loading: true}});\r\n        const res = await postAPI('project', body, auth.token);\r\n       \r\n\r\n        dispatch({type: 'ALERT', payload: {success: res.data.msg}});\r\n\r\n    } catch (err) {       \r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}});\r\n    }\r\n}\r\n\r\nexport const deleteProject = (auth, id) => async (dispatch) => {\r\n    try {\r\n        const res = await deleteAPI(`project/${id}`, auth.token);\r\n\r\n        dispatch({type: 'ALERT', payload: {success: res.data.msg}});\r\n\r\n    } catch (err) { \r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}});\r\n    }\r\n}\r\n\r\nexport const getOwnProjects = (auth) => async (dispatch) => {\r\n    try {\r\n        dispatch({type: 'LOADING_PROJECT', payload: {loading: true}});\r\n        const res = await getAPI('project', auth.token);\r\n       \r\n        dispatch({type: 'GET_OWN_PROJECTS', payload: res.data.codes});\r\n        dispatch({type: 'LOADING_PROJECT', payload: {loading: false}});\r\n\r\n    } catch (err) {       \r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}});\r\n    }\r\n}\r\n\r\nexport const getShareProjects = (auth) => async (dispatch) => {\r\n    try {\r\n        dispatch({type: 'LOADING_PROJECT', payload: {loading: true}});\r\n        const res = await getAPI('project', auth.token);\r\n       \r\n        dispatch({type: 'GET_SHARE_PROJECTS', payload: res.data.codes});\r\n        dispatch({type: 'LOADING_PROJECT', payload: {loading: false}});\r\n\r\n    } catch (err) {       \r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}});\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}