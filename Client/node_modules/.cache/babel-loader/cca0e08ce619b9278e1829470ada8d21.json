{"ast":null,"code":"import { getAPI, patchAPI, postAPI } from '../../apis/Axios';\nimport { imageUpload } from '../../apis/Cloudinary';\nexport const createPost = (data, auth) => async dispatch => {\n  let media = [];\n\n  try {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        loading: true\n      }\n    });\n    dispatch({\n      type: 'MODAL',\n      payload: true\n    });\n    if (data.image.length > 0) media = await imageUpload(data.image);\n    const res = await postAPI('post', {\n      body: data.body,\n      image: media\n    }, auth.token); // dispatch({type:'CREATE_POST'});\n\n    dispatch({\n      type: 'MODAL',\n      payload: false\n    });\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: 'MODAL',\n      payload: false\n    });\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getPosts = token => async dispatch => {\n  try {\n    const res = await getAPI('post', token);\n    dispatch({\n      type: 'GET_POSTS',\n      payload: res.data.posts\n    });\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const updatePost = (content, auth, id, profile) => async dispatch => {\n  try {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        loading: true\n      }\n    });\n    dispatch({\n      type: 'MODAL',\n      payload: true\n    });\n    const res = await patchAPI(`post/${id}`, {\n      body: content\n    }, auth.token); // logic\n\n    let newPosts = [];\n\n    for (let i = 0; i < profile.posts.length; i++) {\n      if (profile.posts[i]._id === id) newPosts.push(res.data.newPost);else newPosts.push(profile.posts[i]);\n    }\n\n    dispatch({\n      type: 'GET_USER_POSTS',\n      payload: newPosts\n    });\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        success: res.data.msg\n      }\n    });\n    dispatch({\n      type: 'MODAL',\n      payload: false\n    });\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const likePost = (auth, post, profile) => async dispatch => {\n  // logic\n  const newPost = { ...post,\n    likes: [...post.likes, auth.user]\n  };\n  let newPosts = [];\n\n  for (let i = 0; i < profile.posts.length; i++) {\n    if (profile.posts[i]._id === post._id) newPosts.push(newPost);else newPosts.push(profile.posts[i]);\n  }\n\n  dispatch({\n    type: 'UPDATE_USER_POST',\n    payload: newPosts\n  });\n\n  try {\n    const res = await patchAPI(`post/${post._id}/like`, null, auth.token);\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const unlikePost = (auth, post, profile) => async dispatch => {\n  // logic\n  let newPost = {};\n  let newLikes = [];\n  console.log(profile.posts);\n  const result = profile.posts.filter(p => p._id === post._id);\n\n  try {// const res = await patchAPI(`post/${post._id}/unlike`, null, auth.token);\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["D:/Project Web/PROJECT 12 (Only MERN)/Client/client/src/store/actions/postAction.js"],"names":["getAPI","patchAPI","postAPI","imageUpload","createPost","data","auth","dispatch","media","type","payload","loading","image","length","res","body","token","success","msg","err","error","response","getPosts","posts","updatePost","content","id","profile","newPosts","i","_id","push","newPost","likePost","post","likes","user","unlikePost","newLikes","console","log","result","filter","p"],"mappings":"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","sourcesContent":["import {getAPI, patchAPI, postAPI} from '../../apis/Axios';\r\nimport {imageUpload} from '../../apis/Cloudinary';\r\n\r\nexport const createPost = (data,auth) => async (dispatch) => {\r\n    let media = [];\r\n    try {\r\n        dispatch({type: 'ALERT', payload: {loading: true}});\r\n        dispatch({type: 'MODAL' , payload: true});\r\n        if(data.image.length > 0) media = await imageUpload(data.image);\r\n\r\n        const res = await postAPI('post', {body: data.body,image: media}, auth.token);\r\n        // dispatch({type:'CREATE_POST'});\r\n        dispatch({type: 'MODAL' , payload: false});\r\n        dispatch({type: 'ALERT', payload: {success: res.data.msg}});\r\n\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'MODAL' , payload: false});\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const getPosts = (token) => async (dispatch) => {\r\n    try {\r\n        const res = await getAPI('post', token);\r\n        dispatch({type: 'GET_POSTS', payload: res.data.posts})\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const updatePost = (content, auth, id, profile) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: 'ALERT', payload: {loading: true} });\r\n        dispatch({type: 'MODAL' , payload: true});\r\n\r\n        const res = await patchAPI(`post/${id}`, {body: content}, auth.token);\r\n\r\n        // logic\r\n        let newPosts = [];\r\n        for (let i = 0; i< profile.posts.length; i++) {\r\n            if(profile.posts[i]._id === id) newPosts.push(res.data.newPost);\r\n            else newPosts.push(profile.posts[i]);\r\n        }  \r\n\r\n        dispatch({ type: 'GET_USER_POSTS', payload: newPosts});\r\n        dispatch({ type: 'ALERT', payload: {success: res.data.msg} });\r\n        dispatch({ type: 'MODAL' , payload: false});\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const likePost = (auth, post, profile) => async (dispatch) => {\r\n    // logic\r\n    const newPost = {...post, likes: [...post.likes, auth.user]};\r\n    let newPosts = [];\r\n\r\n    for (let i = 0; i<profile.posts.length; i++) {\r\n        if(profile.posts[i]._id === post._id) newPosts.push(newPost);\r\n        else newPosts.push(profile.posts[i]);\r\n    }\r\n\r\n    dispatch({type: 'UPDATE_USER_POST', payload: newPosts});\r\n    try {\r\n        const res = await patchAPI(`post/${post._id}/like`, null, auth.token);\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const unlikePost = (auth, post, profile) => async (dispatch) => {\r\n    // logic\r\n    let newPost = {};\r\n    let newLikes = [];\r\n    console.log(profile.posts)\r\n    const result = profile.posts.filter(p => p._id === post._id)\r\n\r\n\r\n    try {\r\n        // const res = await patchAPI(`post/${post._id}/unlike`, null, auth.token);\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}