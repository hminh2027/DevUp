{"ast":null,"code":"import { deleteAPI, patchAPI, postAPI } from \"../../apis/Axios\";\nimport { createNotice, deleteNotice } from './noticeAction';\nexport const createComment = (auth, newComment, post, socket) => async dispatch => {\n  try {\n    const data = { ...newComment,\n      postId: post._id,\n      postUserId: post.user._id\n    };\n    const res = await postAPI('comment', data, auth.token); // logic\n\n    const newData = { ...res.data.newComment,\n      user: auth.user\n    };\n    const newPost = { ...post,\n      comments: [...post.comments, newData]\n    };\n    dispatch({\n      type: 'UPDATE_POST',\n      payload: newPost\n    });\n    dispatch({\n      type: 'GET_POST',\n      payload: newPost\n    });\n    socket.emit('commentPost', newPost);\n    const msg = {\n      id: res.data.newComment._id,\n      receivers: newComment.reply ? [newComment.tag] : auth.user.followers,\n      text: newComment.reply ? 'reply your comment' : 'comment to your post',\n      url: newPost._id,\n      tag: 'COMMENT',\n      body: '',\n      image: newPost.image.length > 0 ? newPost.image[0].url : ''\n    };\n    dispatch(createNotice(auth, msg, socket));\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const deleteComment = (auth, comment, post, socket) => async dispatch => {\n  try {\n    // delete the main and reply comments\n    const deleteArr = [...post.comments.filter(cmt => cmt.reply === comment._id), comment]; // logic\n\n    const newPost = { ...post,\n      comments: post.comments.filter(cmt => !deleteArr.find(deletedCmt => cmt._id === deletedCmt._id))\n    };\n    dispatch({\n      type: 'UPDATE_POST',\n      payload: newPost\n    });\n    socket.emit('uncommentPost', newPost);\n    deleteArr.forEach(async item => {\n      await deleteAPI(`comment/${item._id}`, auth.token);\n      const msg = {\n        id: item._id,\n        receivers: comment.reply ? [comment.tag._id] : [post.user._id],\n        url: post._id\n      };\n      dispatch(deleteNotice(auth, msg));\n    });\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const updateComment = (auth, body, post, posts, comment) => dispatch => {\n  const newComment = { ...comment,\n    body: body\n  };\n  const newComments = post.comments.map(cmt => cmt._id === comment._id ? newComment : cmt);\n  const newPost = { ...post,\n    comments: newComments\n  };\n  dispatch({\n    type: 'UPDATE_POST',\n    payload: newPost\n  });\n\n  try {\n    const res = patchAPI(`comment/${comment._id}`, {\n      body\n    }, auth.token);\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["D:/Project Web/Project Web/PROJECT 12 (Only MERN)/Client/client/src/store/actions/commentAction.js"],"names":["deleteAPI","patchAPI","postAPI","createNotice","deleteNotice","createComment","auth","newComment","post","socket","dispatch","data","postId","_id","postUserId","user","res","token","newData","newPost","comments","type","payload","emit","msg","id","receivers","reply","tag","followers","text","url","body","image","length","err","error","response","deleteComment","comment","deleteArr","filter","cmt","find","deletedCmt","forEach","item","updateComment","posts","newComments","map"],"mappings":"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","sourcesContent":["import { deleteAPI, patchAPI, postAPI } from \"../../apis/Axios\";\r\nimport {createNotice, deleteNotice} from './noticeAction'\r\n\r\nexport const createComment = (auth, newComment, post, socket) => async (dispatch) => {\r\n    try {\r\n        const data = {...newComment, postId: post._id, postUserId: post.user._id}\r\n        const res = await postAPI('comment', data, auth.token);\r\n        // logic\r\n        const newData = {...res.data.newComment, user: auth.user};\r\n        const newPost = {...post, comments: [...post.comments, newData]};\r\n\r\n        dispatch({type: 'UPDATE_POST', payload: newPost});\r\n        dispatch({type: 'GET_POST', payload: newPost});\r\n\r\n        socket.emit('commentPost', newPost);\r\n\r\n        const msg = {\r\n            id: res.data.newComment._id,\r\n            receivers: newComment.reply ? [newComment.tag] : auth.user.followers,\r\n            text: newComment.reply ? 'reply your comment' : 'comment to your post',\r\n            url: newPost._id,\r\n            tag: 'COMMENT',\r\n            body: '',\r\n            image: newPost.image.length>0 ? newPost.image[0].url : ''\r\n        }\r\n\r\n        dispatch(createNotice(auth, msg, socket));\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}});\r\n    }\r\n}\r\n\r\nexport const deleteComment = (auth, comment, post, socket) => async (dispatch) => {\r\n    try {\r\n        // delete the main and reply comments\r\n        const deleteArr = [...post.comments.filter(cmt=>cmt.reply===comment._id), comment];\r\n        // logic\r\n        const newPost = {\r\n            ...post, \r\n            comments: post.comments.filter(cmt=>!deleteArr.find(deletedCmt=>cmt._id===deletedCmt._id))\r\n        };\r\n\r\n        dispatch({type: 'UPDATE_POST', payload: newPost});\r\n\r\n        socket.emit('uncommentPost', newPost);\r\n\r\n        deleteArr.forEach(async item=>{\r\n            await deleteAPI(`comment/${item._id}`, auth.token);\r\n\r\n            const msg = {\r\n                id: item._id,\r\n                receivers: comment.reply ? [comment.tag._id] : [post.user._id],\r\n                url: post._id\r\n            }\r\n            dispatch(deleteNotice(auth, msg))\r\n        })\r\n\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}});\r\n    }\r\n}\r\n\r\nexport const updateComment = (auth, body, post, posts, comment) => (dispatch) => {\r\n    const newComment = {...comment, body: body};\r\n    const newComments = post.comments.map(cmt=>cmt._id===comment._id?newComment:cmt);\r\n\r\n    const newPost = {...post, comments: newComments};\r\n    \r\n    dispatch({type: 'UPDATE_POST', payload: newPost});\r\n\r\n    try {\r\n        const res = patchAPI(`comment/${comment._id}`, {body}, auth.token);\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}});\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}