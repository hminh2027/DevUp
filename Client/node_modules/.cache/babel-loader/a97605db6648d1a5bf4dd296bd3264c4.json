{"ast":null,"code":"import { deleteAPI, patchAPI, postAPI } from \"../../apis/Axios\";\nexport const createComment = (auth, newComment, post, posts, socket) => async dispatch => {\n  try {\n    const data = { ...newComment,\n      postId: post._id,\n      postUserId: post.user._id\n    };\n    const res = await postAPI('comment', data, auth.token); // logic\n\n    const newData = { ...res.data.newComment,\n      user: auth.user\n    };\n    const newPost = { ...post,\n      comments: [...post.comments, newData]\n    };\n    let newPosts = posts.map(p => p._id === post._id ? newPost : p);\n    dispatch({\n      type: 'UPDATE_POST',\n      payload: newPosts\n    });\n    socket.emit('commentPost', newPost, newPosts);\n    console.log(newPost._id); // const msg = {\n    //     id: newPost._id,\n    //     receivers: auth.user.followers,\n    //     text: 'comment to your post',\n    //     url: `/post/${newPost._id}`,\n    //     tag: 'COMMENT',\n    //     body: newPost.body,\n    //     image: newPost.image.length>0 ? newPost.image[0].url : ''\n    // }\n    // dispatch(createNotice(auth, msg, socket));\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const deleteComment = (auth, comment, post, posts, socket) => async dispatch => {\n  try {\n    // delete the main and reply comments\n    const deleteArr = [...post.comments.filter(cmt => cmt.reply === comment._id), comment]; // logic\n\n    const newPost = { ...post,\n      comments: post.comments.filter(cmt => !deleteArr.find(deletedCmt => cmt._id === deletedCmt._id))\n    };\n    let newPosts = posts.map(p => p._id === post._id ? newPost : p);\n    dispatch({\n      type: 'UPDATE_POST',\n      payload: newPosts\n    });\n    socket.emit('uncommentPost', newPost, newPosts);\n    deleteArr.forEach(async item => {\n      await deleteAPI(`comment/${item._id}`, auth.token);\n    });\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const updateComment = (auth, body, post, posts, comment) => dispatch => {\n  const newComment = { ...comment,\n    body: body\n  };\n  const newComments = post.comments.map(cmt => cmt._id === comment._id ? newComment : cmt);\n  const newPost = { ...post,\n    comments: newComments\n  };\n  let newPosts = posts.map(p => p._id === post._id ? newPost : p);\n  dispatch({\n    type: 'UPDATE_POST',\n    payload: newPosts\n  });\n\n  try {\n    const res = patchAPI(`comment/${comment._id}`, {\n      body\n    }, auth.token);\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["D:/Project Web/PROJECT 12 (Only MERN)/Client/client/src/store/actions/commentAction.js"],"names":["deleteAPI","patchAPI","postAPI","createComment","auth","newComment","post","posts","socket","dispatch","data","postId","_id","postUserId","user","res","token","newData","newPost","comments","newPosts","map","p","type","payload","emit","console","log","err","error","response","msg","deleteComment","comment","deleteArr","filter","cmt","reply","find","deletedCmt","forEach","item","updateComment","body","newComments"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,OAA9B,QAA6C,kBAA7C;AAEA,OAAO,MAAMC,aAAa,GAAG,CAACC,IAAD,EAAOC,UAAP,EAAmBC,IAAnB,EAAyBC,KAAzB,EAAgCC,MAAhC,KAA2C,MAAOC,QAAP,IAAoB;AACxF,MAAI;AACA,UAAMC,IAAI,GAAG,EAAC,GAAGL,UAAJ;AAAgBM,MAAAA,MAAM,EAAEL,IAAI,CAACM,GAA7B;AAAkCC,MAAAA,UAAU,EAAEP,IAAI,CAACQ,IAAL,CAAUF;AAAxD,KAAb;AACA,UAAMG,GAAG,GAAG,MAAMb,OAAO,CAAC,SAAD,EAAYQ,IAAZ,EAAkBN,IAAI,CAACY,KAAvB,CAAzB,CAFA,CAGA;;AACA,UAAMC,OAAO,GAAG,EAAC,GAAGF,GAAG,CAACL,IAAJ,CAASL,UAAb;AAAyBS,MAAAA,IAAI,EAAEV,IAAI,CAACU;AAApC,KAAhB;AACA,UAAMI,OAAO,GAAG,EAAC,GAAGZ,IAAJ;AAAUa,MAAAA,QAAQ,EAAE,CAAC,GAAGb,IAAI,CAACa,QAAT,EAAmBF,OAAnB;AAApB,KAAhB;AAEA,QAAIG,QAAQ,GAAGb,KAAK,CAACc,GAAN,CAAUC,CAAC,IAAEA,CAAC,CAACV,GAAF,KAAQN,IAAI,CAACM,GAAb,GAAiBM,OAAjB,GAAyBI,CAAtC,CAAf;AAEAb,IAAAA,QAAQ,CAAC;AAACc,MAAAA,IAAI,EAAE,aAAP;AAAsBC,MAAAA,OAAO,EAAEJ;AAA/B,KAAD,CAAR;AACAZ,IAAAA,MAAM,CAACiB,IAAP,CAAY,aAAZ,EAA2BP,OAA3B,EAAoCE,QAApC;AAEAM,IAAAA,OAAO,CAACC,GAAR,CAAYT,OAAO,CAACN,GAApB,EAZA,CAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEH,GAxBD,CAwBE,OAAMgB,GAAN,EAAW;AACTnB,IAAAA,QAAQ,CAAC;AAACc,MAAAA,IAAI,EAAE,OAAP;AAAgBC,MAAAA,OAAO,EAAE;AAACK,QAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAapB,IAAb,CAAkBqB;AAA1B;AAAzB,KAAD,CAAR;AACH;AACJ,CA5BM;AA8BP,OAAO,MAAMC,aAAa,GAAG,CAAC5B,IAAD,EAAO6B,OAAP,EAAgB3B,IAAhB,EAAsBC,KAAtB,EAA6BC,MAA7B,KAAwC,MAAOC,QAAP,IAAoB;AACrF,MAAI;AACA;AACA,UAAMyB,SAAS,GAAG,CAAC,GAAG5B,IAAI,CAACa,QAAL,CAAcgB,MAAd,CAAqBC,GAAG,IAAEA,GAAG,CAACC,KAAJ,KAAYJ,OAAO,CAACrB,GAA9C,CAAJ,EAAwDqB,OAAxD,CAAlB,CAFA,CAGA;;AACA,UAAMf,OAAO,GAAG,EACZ,GAAGZ,IADS;AAEZa,MAAAA,QAAQ,EAAEb,IAAI,CAACa,QAAL,CAAcgB,MAAd,CAAqBC,GAAG,IAAE,CAACF,SAAS,CAACI,IAAV,CAAeC,UAAU,IAAEH,GAAG,CAACxB,GAAJ,KAAU2B,UAAU,CAAC3B,GAAhD,CAA3B;AAFE,KAAhB;AAKA,QAAIQ,QAAQ,GAAGb,KAAK,CAACc,GAAN,CAAUC,CAAC,IAAEA,CAAC,CAACV,GAAF,KAAQN,IAAI,CAACM,GAAb,GAAiBM,OAAjB,GAAyBI,CAAtC,CAAf;AAEAb,IAAAA,QAAQ,CAAC;AAACc,MAAAA,IAAI,EAAE,aAAP;AAAsBC,MAAAA,OAAO,EAAEJ;AAA/B,KAAD,CAAR;AACAZ,IAAAA,MAAM,CAACiB,IAAP,CAAY,eAAZ,EAA6BP,OAA7B,EAAsCE,QAAtC;AAEAc,IAAAA,SAAS,CAACM,OAAV,CAAkB,MAAMC,IAAN,IAAY;AAC1B,YAAMzC,SAAS,CAAE,WAAUyC,IAAI,CAAC7B,GAAI,EAArB,EAAwBR,IAAI,CAACY,KAA7B,CAAf;AACH,KAFD;AAIH,GAlBD,CAkBE,OAAMY,GAAN,EAAW;AACTnB,IAAAA,QAAQ,CAAC;AAACc,MAAAA,IAAI,EAAE,OAAP;AAAgBC,MAAAA,OAAO,EAAE;AAACK,QAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAapB,IAAb,CAAkBqB;AAA1B;AAAzB,KAAD,CAAR;AACH;AACJ,CAtBM;AAwBP,OAAO,MAAMW,aAAa,GAAG,CAACtC,IAAD,EAAOuC,IAAP,EAAarC,IAAb,EAAmBC,KAAnB,EAA0B0B,OAA1B,KAAuCxB,QAAD,IAAc;AAC7E,QAAMJ,UAAU,GAAG,EAAC,GAAG4B,OAAJ;AAAaU,IAAAA,IAAI,EAAEA;AAAnB,GAAnB;AACA,QAAMC,WAAW,GAAGtC,IAAI,CAACa,QAAL,CAAcE,GAAd,CAAkBe,GAAG,IAAEA,GAAG,CAACxB,GAAJ,KAAUqB,OAAO,CAACrB,GAAlB,GAAsBP,UAAtB,GAAiC+B,GAAxD,CAApB;AAEA,QAAMlB,OAAO,GAAG,EAAC,GAAGZ,IAAJ;AAAUa,IAAAA,QAAQ,EAAEyB;AAApB,GAAhB;AAEA,MAAIxB,QAAQ,GAACb,KAAK,CAACc,GAAN,CAAUC,CAAC,IAAEA,CAAC,CAACV,GAAF,KAAQN,IAAI,CAACM,GAAb,GAAiBM,OAAjB,GAAyBI,CAAtC,CAAb;AAEAb,EAAAA,QAAQ,CAAC;AAACc,IAAAA,IAAI,EAAE,aAAP;AAAsBC,IAAAA,OAAO,EAAEJ;AAA/B,GAAD,CAAR;;AACA,MAAI;AACA,UAAML,GAAG,GAAGd,QAAQ,CAAE,WAAUgC,OAAO,CAACrB,GAAI,EAAxB,EAA2B;AAAC+B,MAAAA;AAAD,KAA3B,EAAmCvC,IAAI,CAACY,KAAxC,CAApB;AAEH,GAHD,CAGE,OAAMY,GAAN,EAAW;AACTnB,IAAAA,QAAQ,CAAC;AAACc,MAAAA,IAAI,EAAE,OAAP;AAAgBC,MAAAA,OAAO,EAAE;AAACK,QAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAapB,IAAb,CAAkBqB;AAA1B;AAAzB,KAAD,CAAR;AACH;AACJ,CAfM","sourcesContent":["import { deleteAPI, patchAPI, postAPI } from \"../../apis/Axios\";\r\n\r\nexport const createComment = (auth, newComment, post, posts, socket) => async (dispatch) => {\r\n    try {\r\n        const data = {...newComment, postId: post._id, postUserId: post.user._id}\r\n        const res = await postAPI('comment', data, auth.token);\r\n        // logic\r\n        const newData = {...res.data.newComment, user: auth.user};\r\n        const newPost = {...post, comments: [...post.comments, newData]};\r\n\r\n        let newPosts = posts.map(p=>p._id===post._id?newPost:p);\r\n\r\n        dispatch({type: 'UPDATE_POST', payload: newPosts});\r\n        socket.emit('commentPost', newPost, newPosts);\r\n\r\n        console.log(newPost._id);\r\n        // const msg = {\r\n        //     id: newPost._id,\r\n        //     receivers: auth.user.followers,\r\n        //     text: 'comment to your post',\r\n        //     url: `/post/${newPost._id}`,\r\n        //     tag: 'COMMENT',\r\n        //     body: newPost.body,\r\n        //     image: newPost.image.length>0 ? newPost.image[0].url : ''\r\n        // }\r\n        // dispatch(createNotice(auth, msg, socket));\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}});\r\n    }\r\n}\r\n\r\nexport const deleteComment = (auth, comment, post, posts, socket) => async (dispatch) => {\r\n    try {\r\n        // delete the main and reply comments\r\n        const deleteArr = [...post.comments.filter(cmt=>cmt.reply===comment._id), comment];\r\n        // logic\r\n        const newPost = {\r\n            ...post, \r\n            comments: post.comments.filter(cmt=>!deleteArr.find(deletedCmt=>cmt._id===deletedCmt._id))\r\n        };\r\n\r\n        let newPosts = posts.map(p=>p._id===post._id?newPost:p);\r\n\r\n        dispatch({type: 'UPDATE_POST', payload: newPosts});\r\n        socket.emit('uncommentPost', newPost, newPosts);\r\n\r\n        deleteArr.forEach(async item=>{\r\n            await deleteAPI(`comment/${item._id}`, auth.token);\r\n        })\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}});\r\n    }\r\n}\r\n\r\nexport const updateComment = (auth, body, post, posts, comment) => (dispatch) => {\r\n    const newComment = {...comment, body: body};\r\n    const newComments = post.comments.map(cmt=>cmt._id===comment._id?newComment:cmt);\r\n\r\n    const newPost = {...post, comments: newComments};\r\n    \r\n    let newPosts=posts.map(p=>p._id===post._id?newPost:p);\r\n    \r\n    dispatch({type: 'UPDATE_POST', payload: newPosts});\r\n    try {\r\n        const res = patchAPI(`comment/${comment._id}`, {body}, auth.token);\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}});\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}