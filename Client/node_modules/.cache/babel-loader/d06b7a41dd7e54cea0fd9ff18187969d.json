{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project Web\\\\Project Web\\\\PROJECT 12 (Only MERN)\\\\Client\\\\client\\\\src\\\\components\\\\notification\\\\NotificationDropdown.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { CgMoreAlt } from 'react-icons/cg';\nimport DropdownCard from '../util/DropdownCard';\nimport NoticeCard from './notices/NoticeCard';\nimport NotificationOption from './NotificationOption';\nimport { useMediaQuery } from 'react-responsive';\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport Spinner from '../../assets/Spinner.png';\nimport styles from './NotificationDropdown.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst NotificationDropdown = ({\n  isShow,\n  setIsShow\n}) => {\n  _s();\n\n  const {\n    notice\n  } = useSelector(state => state);\n  const [showOption, setShowOption] = useState(false);\n  const isDesktop = useMediaQuery({\n    query: '(min-width: 1224px)'\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(DropdownCard, {\n      isShow: isShow,\n      setIsShow: setIsShow,\n      right: \"0\",\n      width: isDesktop ? '30%' : '90%',\n      padding: isDesktop ? '1rem' : '5%',\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.heading,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.title,\n          children: \"Notification\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            opacity: `${showOption ? '1' : '.5'}`\n          },\n          onClick: () => setShowOption(true),\n          className: styles.heading_option,\n          children: [/*#__PURE__*/_jsxDEV(CgMoreAlt, {\n            className: styles.icon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(NotificationOption, {\n            isShow: showOption,\n            setIsShow: setShowOption\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.content,\n        children: /*#__PURE__*/_jsxDEV(AnimatePresence, {\n          children: notice.loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.spinner_wrapper,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: Spinner,\n              alt: \"spinner\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 61\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 21\n          }, this) : notice.data.length > 0 ? notice.data.map((msg, index) => /*#__PURE__*/_jsxDEV(motion.div, {\n            initial: {\n              transform: 'translate(150%,0)'\n            },\n            animate: {\n              transform: 'translate(0,0)',\n              transitionDuration: `.6s`,\n              transitionDelay: `${(index + 1) * 0.2}s`\n            },\n            children: /*#__PURE__*/_jsxDEV(NoticeCard, {\n              msg: msg\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 29\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 25\n          }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              textAlign: 'center'\n            },\n            children: \"No notifications available!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(NotificationDropdown, \"e2Heuqo0SCZN7S0Wpp/BVHzqOMs=\", false, function () {\n  return [useSelector, useMediaQuery];\n});\n\n_c = NotificationDropdown;\nexport default NotificationDropdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"NotificationDropdown\");","map":{"version":3,"sources":["D:/Project Web/Project Web/PROJECT 12 (Only MERN)/Client/client/src/components/notification/NotificationDropdown.js"],"names":["React","useState","useSelector","CgMoreAlt","DropdownCard","NoticeCard","NotificationOption","useMediaQuery","motion","AnimatePresence","Spinner","styles","NotificationDropdown","isShow","setIsShow","notice","state","showOption","setShowOption","isDesktop","query","heading","title","opacity","heading_option","icon","content","loading","spinner_wrapper","data","length","map","msg","index","transform","transitionDuration","transitionDelay","textAlign"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport {CgMoreAlt} from 'react-icons/cg'\r\n\r\nimport DropdownCard from '../util/DropdownCard'\r\nimport NoticeCard from './notices/NoticeCard'\r\nimport NotificationOption from './NotificationOption'\r\nimport { useMediaQuery } from 'react-responsive'\r\n\r\nimport { motion, AnimatePresence } from \"framer-motion\"\r\n\r\nimport Spinner from '../../assets/Spinner.png'\r\nimport styles from './NotificationDropdown.module.css'\r\n\r\nconst NotificationDropdown = ({isShow, setIsShow}) => {    \r\n    const {notice} = useSelector(state=>state)\r\n    const [showOption, setShowOption] = useState(false)\r\n\r\n    const isDesktop = useMediaQuery({ query: '(min-width: 1224px)' })\r\n\r\n    return (\r\n        <>\r\n            <DropdownCard isShow={isShow} setIsShow={setIsShow} right='0' width={isDesktop ? '30%': '90%'} padding={isDesktop ? '1rem': '5%'}>\r\n                <div className={styles.heading}>\r\n                    <div className={styles.title}>Notification</div>\r\n                    <div style={{opacity: `${showOption ? '1' : '.5'}`}} onClick={()=>setShowOption(true)} className={styles.heading_option}>\r\n                        <CgMoreAlt className={styles.icon}/>\r\n                        <NotificationOption  isShow={showOption} setIsShow={setShowOption}/>\r\n                    </div>\r\n                </div>\r\n                <div className={styles.content}>\r\n                <AnimatePresence >\r\n                    {notice.loading ? \r\n                    <div className={styles.spinner_wrapper}><img src={Spinner} alt='spinner'/></div> \r\n                    : \r\n                    notice.data.length>0 ? notice.data.map((msg,index)=>(\r\n                        <motion.div\r\n                        key={index}\r\n                        initial={{transform: 'translate(150%,0)'}}\r\n                        animate={{transform: 'translate(0,0)', transitionDuration: `.6s`, transitionDelay:`${(index+1)*0.2}s`}}\r\n                        >\r\n                            <NoticeCard msg={msg} />\r\n                        </motion.div>\r\n                    )) : \r\n                    <div style={{textAlign: 'center'}}>No notifications available!</div>                   \r\n                    }\r\n                </AnimatePresence>\r\n                </div>\r\n            </DropdownCard>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default NotificationDropdown\r\n"]},"metadata":{},"sourceType":"module"}