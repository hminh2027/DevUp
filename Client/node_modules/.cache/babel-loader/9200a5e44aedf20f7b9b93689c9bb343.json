{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project Web\\\\PROJECT 12 (Only MERN)\\\\Client\\\\client\\\\src\\\\components\\\\util\\\\Cropper.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport styles from './Cropper.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Cropper = ({\n  src\n}) => {\n  _s();\n\n  const [crop, setCrop] = useState({\n    aspect: 1 / 1\n  });\n  const [image, setImage] = useState(null);\n  const [link, setLink] = useState(null);\n  const [result, setResult] = useState(null);\n  useEffect(() => {\n    setLink(URL.createObjectURL(src));\n  }, [src]);\n\n  function getCroppedImg() {\n    const canvas = document.createElement(\"canvas\");\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext(\"2d\"); // New lines to be added\n\n    const pixelRatio = window.devicePixelRatio;\n    canvas.width = crop.width * pixelRatio;\n    canvas.height = crop.height * pixelRatio;\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n    ctx.imageSmoothingQuality = \"high\";\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n    const base64Image = canvas.toDataURL(\"image/jpeg\");\n    setResult(base64Image);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(ReactCrop, {\n      crop: crop,\n      src: link,\n      onChange: setCrop,\n      onImageLoaded: setImage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: getCroppedImg,\n      className: \"crop_image\",\n      children: \"Crop Image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), result && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"img\", {\n        src: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 23\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Cropper, \"2DTItulLTW7ZNE3wEA+6ifxbRWk=\");\n\n_c = Cropper;\nexport default Cropper;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cropper\");","map":{"version":3,"sources":["D:/Project Web/PROJECT 12 (Only MERN)/Client/client/src/components/util/Cropper.js"],"names":["React","useEffect","useState","ReactCrop","styles","Cropper","src","crop","setCrop","aspect","image","setImage","link","setLink","result","setResult","URL","createObjectURL","getCroppedImg","canvas","document","createElement","scaleX","naturalWidth","width","scaleY","naturalHeight","height","ctx","getContext","pixelRatio","window","devicePixelRatio","setTransform","imageSmoothingQuality","drawImage","x","y","base64Image","toDataURL","container"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport ReactCrop from 'react-image-crop';\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\nimport styles from './Cropper.module.css'\r\n\r\nconst Cropper = ({src}) => {\r\n    const [crop, setCrop] = useState({aspect: 1/1});\r\n    const [image, setImage] = useState(null);\r\n    const [link, setLink] = useState(null);\r\n    const [result, setResult] = useState(null);\r\n    \r\n    useEffect(()=>{\r\n        setLink(URL.createObjectURL(src))\r\n    },[src])\r\n\r\n    function getCroppedImg() {\r\n        const canvas = document.createElement(\"canvas\");\r\n        const scaleX = image.naturalWidth / image.width;\r\n        const scaleY = image.naturalHeight / image.height;\r\n        canvas.width = crop.width;\r\n        canvas.height = crop.height;\r\n        const ctx = canvas.getContext(\"2d\");\r\n      \r\n        // New lines to be added\r\n        const pixelRatio = window.devicePixelRatio;\r\n        canvas.width = crop.width * pixelRatio;\r\n        canvas.height = crop.height * pixelRatio;\r\n        ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\r\n        ctx.imageSmoothingQuality = \"high\";\r\n      \r\n        ctx.drawImage(\r\n          image,\r\n          crop.x * scaleX,\r\n          crop.y * scaleY,\r\n          crop.width * scaleX,\r\n          crop.height * scaleY,\r\n          0,\r\n          0,\r\n          crop.width,\r\n          crop.height\r\n        );\r\n        const base64Image = canvas.toDataURL(\"image/jpeg\");\r\n        setResult(base64Image);\r\n    }\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <ReactCrop crop={crop} src={link} onChange={setCrop} onImageLoaded={setImage} />\r\n            <div onClick={getCroppedImg} className=\"crop_image\">Crop Image</div>\r\n            {result && \r\n                <div> <img src={result} /> </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cropper\r\n"]},"metadata":{},"sourceType":"module"}