{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"D:/Project Web/Project Web/PROJECT 12 (Only MERN)/Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:/Project Web/Project Web/PROJECT 12 (Only MERN)/Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"D:/Project Web/Project Web/PROJECT 12 (Only MERN)/Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"D:/Project Web/Project Web/PROJECT 12 (Only MERN)/Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"D:/Project Web/Project Web/PROJECT 12 (Only MERN)/Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Manager = void 0;\n\nvar eio = require(\"engine.io-client\");\n\nvar util_1 = require(\"engine.io-client/lib/util\");\n\nvar socket_1 = require(\"./socket\");\n\nvar parser = require(\"socket.io-parser\");\n\nvar on_1 = require(\"./on\");\n\nvar Backoff = require(\"backo2\");\n\nvar typed_events_1 = require(\"./typed-events\");\n\nvar debug = require(\"debug\")(\"socket.io-client:manager\");\n\nvar Manager = /*#__PURE__*/function (_typed_events_1$Stric) {\n  _inherits(Manager, _typed_events_1$Stric);\n\n  var _super = _createSuper(Manager);\n\n  function Manager(uri, opts) {\n    var _this;\n\n    _classCallCheck(this, Manager);\n\n    var _a;\n\n    _this = _super.call(this);\n    _this.nsps = {};\n    _this.subs = [];\n\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = undefined;\n    }\n\n    opts = opts || {};\n    opts.path = opts.path || \"/socket.io\";\n    _this.opts = opts;\n    (0, util_1.installTimerFunctions)(_assertThisInitialized(_this), opts);\n\n    _this.reconnection(opts.reconnection !== false);\n\n    _this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n\n    _this.reconnectionDelay(opts.reconnectionDelay || 1000);\n\n    _this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n\n    _this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\n\n    _this.backoff = new Backoff({\n      min: _this.reconnectionDelay(),\n      max: _this.reconnectionDelayMax(),\n      jitter: _this.randomizationFactor()\n    });\n\n    _this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n\n    _this._readyState = \"closed\";\n    _this.uri = uri;\n\n    var _parser = opts.parser || parser;\n\n    _this.encoder = new _parser.Encoder();\n    _this.decoder = new _parser.Decoder();\n    _this._autoConnect = opts.autoConnect !== false;\n    if (_this._autoConnect) _this.open();\n    return _this;\n  }\n\n  _createClass(Manager, [{\n    key: \"reconnection\",\n    value: function reconnection(v) {\n      if (!arguments.length) return this._reconnection;\n      this._reconnection = !!v;\n      return this;\n    }\n  }, {\n    key: \"reconnectionAttempts\",\n    value: function reconnectionAttempts(v) {\n      if (v === undefined) return this._reconnectionAttempts;\n      this._reconnectionAttempts = v;\n      return this;\n    }\n  }, {\n    key: \"reconnectionDelay\",\n    value: function reconnectionDelay(v) {\n      var _a;\n\n      if (v === undefined) return this._reconnectionDelay;\n      this._reconnectionDelay = v;\n      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n      return this;\n    }\n  }, {\n    key: \"randomizationFactor\",\n    value: function randomizationFactor(v) {\n      var _a;\n\n      if (v === undefined) return this._randomizationFactor;\n      this._randomizationFactor = v;\n      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n      return this;\n    }\n  }, {\n    key: \"reconnectionDelayMax\",\n    value: function reconnectionDelayMax(v) {\n      var _a;\n\n      if (v === undefined) return this._reconnectionDelayMax;\n      this._reconnectionDelayMax = v;\n      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n      return this;\n    }\n  }, {\n    key: \"timeout\",\n    value: function timeout(v) {\n      if (!arguments.length) return this._timeout;\n      this._timeout = v;\n      return this;\n    }\n    /**\n     * Starts trying to reconnect if reconnection is enabled and we have not\n     * started reconnecting yet\n     *\n     * @private\n     */\n\n  }, {\n    key: \"maybeReconnectOnOpen\",\n    value: function maybeReconnectOnOpen() {\n      // Only try to reconnect if it's the first time we're connecting\n      if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) {\n        // keeps reconnection from firing twice for the same reconnection loop\n        this.reconnect();\n      }\n    }\n    /**\n     * Sets the current transport `socket`.\n     *\n     * @param {Function} fn - optional, callback\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"open\",\n    value: function open(fn) {\n      var _this2 = this;\n\n      debug(\"readyState %s\", this._readyState);\n      if (~this._readyState.indexOf(\"open\")) return this;\n      debug(\"opening %s\", this.uri);\n      this.engine = eio(this.uri, this.opts);\n      var socket = this.engine;\n      var self = this;\n      this._readyState = \"opening\";\n      this.skipReconnect = false; // emit `open`\n\n      var openSubDestroy = (0, on_1.on)(socket, \"open\", function () {\n        self.onopen();\n        fn && fn();\n      }); // emit `error`\n\n      var errorSub = (0, on_1.on)(socket, \"error\", function (err) {\n        debug(\"error\");\n        self.cleanup();\n        self._readyState = \"closed\";\n\n        _this2.emitReserved(\"error\", err);\n\n        if (fn) {\n          fn(err);\n        } else {\n          // Only do this if there is no fn to handle the error\n          self.maybeReconnectOnOpen();\n        }\n      });\n\n      if (false !== this._timeout) {\n        var timeout = this._timeout;\n        debug(\"connect attempt will timeout after %d\", timeout);\n\n        if (timeout === 0) {\n          openSubDestroy(); // prevents a race condition with the 'open' event\n        } // set timer\n\n\n        var timer = this.setTimeoutFn(function () {\n          debug(\"connect attempt timed out after %d\", timeout);\n          openSubDestroy();\n          socket.close();\n          socket.emit(\"error\", new Error(\"timeout\"));\n        }, timeout);\n\n        if (this.opts.autoUnref) {\n          timer.unref();\n        }\n\n        this.subs.push(function subDestroy() {\n          clearTimeout(timer);\n        });\n      }\n\n      this.subs.push(openSubDestroy);\n      this.subs.push(errorSub);\n      return this;\n    }\n    /**\n     * Alias for open()\n     *\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"connect\",\n    value: function connect(fn) {\n      return this.open(fn);\n    }\n    /**\n     * Called upon transport open.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onopen\",\n    value: function onopen() {\n      debug(\"open\"); // clear old subs\n\n      this.cleanup(); // mark as open\n\n      this._readyState = \"open\";\n      this.emitReserved(\"open\"); // add new subs\n\n      var socket = this.engine;\n      this.subs.push((0, on_1.on)(socket, \"ping\", this.onping.bind(this)), (0, on_1.on)(socket, \"data\", this.ondata.bind(this)), (0, on_1.on)(socket, \"error\", this.onerror.bind(this)), (0, on_1.on)(socket, \"close\", this.onclose.bind(this)), (0, on_1.on)(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n    }\n    /**\n     * Called upon a ping.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onping\",\n    value: function onping() {\n      this.emitReserved(\"ping\");\n    }\n    /**\n     * Called with data.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"ondata\",\n    value: function ondata(data) {\n      this.decoder.add(data);\n    }\n    /**\n     * Called when parser fully decodes a packet.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"ondecoded\",\n    value: function ondecoded(packet) {\n      this.emitReserved(\"packet\", packet);\n    }\n    /**\n     * Called upon socket error.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onerror\",\n    value: function onerror(err) {\n      debug(\"error\", err);\n      this.emitReserved(\"error\", err);\n    }\n    /**\n     * Creates a new socket for the given `nsp`.\n     *\n     * @return {Socket}\n     * @public\n     */\n\n  }, {\n    key: \"socket\",\n    value: function socket(nsp, opts) {\n      var socket = this.nsps[nsp];\n\n      if (!socket) {\n        socket = new socket_1.Socket(this, nsp, opts);\n        this.nsps[nsp] = socket;\n      }\n\n      return socket;\n    }\n    /**\n     * Called upon a socket close.\n     *\n     * @param socket\n     * @private\n     */\n\n  }, {\n    key: \"_destroy\",\n    value: function _destroy(socket) {\n      var nsps = Object.keys(this.nsps);\n\n      for (var _i = 0, _nsps = nsps; _i < _nsps.length; _i++) {\n        var nsp = _nsps[_i];\n        var _socket = this.nsps[nsp];\n\n        if (_socket.active) {\n          debug(\"socket %s is still active, skipping close\", nsp);\n          return;\n        }\n      }\n\n      this._close();\n    }\n    /**\n     * Writes a packet.\n     *\n     * @param packet\n     * @private\n     */\n\n  }, {\n    key: \"_packet\",\n    value: function _packet(packet) {\n      debug(\"writing packet %j\", packet);\n      var encodedPackets = this.encoder.encode(packet);\n\n      for (var i = 0; i < encodedPackets.length; i++) {\n        this.engine.write(encodedPackets[i], packet.options);\n      }\n    }\n    /**\n     * Clean up transport subscriptions and packet buffer.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      debug(\"cleanup\");\n      this.subs.forEach(function (subDestroy) {\n        return subDestroy();\n      });\n      this.subs.length = 0;\n      this.decoder.destroy();\n    }\n    /**\n     * Close the current socket.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_close\",\n    value: function _close() {\n      debug(\"disconnect\");\n      this.skipReconnect = true;\n      this._reconnecting = false;\n\n      if (\"opening\" === this._readyState) {\n        // `onclose` will not fire because\n        // an open event never happened\n        this.cleanup();\n      }\n\n      this.backoff.reset();\n      this._readyState = \"closed\";\n      if (this.engine) this.engine.close();\n    }\n    /**\n     * Alias for close()\n     *\n     * @private\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      return this._close();\n    }\n    /**\n     * Called upon engine close.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onclose\",\n    value: function onclose(reason) {\n      debug(\"onclose\");\n      this.cleanup();\n      this.backoff.reset();\n      this._readyState = \"closed\";\n      this.emitReserved(\"close\", reason);\n\n      if (this._reconnection && !this.skipReconnect) {\n        this.reconnect();\n      }\n    }\n    /**\n     * Attempt a reconnection.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"reconnect\",\n    value: function reconnect() {\n      var _this3 = this;\n\n      if (this._reconnecting || this.skipReconnect) return this;\n      var self = this;\n\n      if (this.backoff.attempts >= this._reconnectionAttempts) {\n        debug(\"reconnect failed\");\n        this.backoff.reset();\n        this.emitReserved(\"reconnect_failed\");\n        this._reconnecting = false;\n      } else {\n        var delay = this.backoff.duration();\n        debug(\"will wait %dms before reconnect attempt\", delay);\n        this._reconnecting = true;\n        var timer = this.setTimeoutFn(function () {\n          if (self.skipReconnect) return;\n          debug(\"attempting reconnect\");\n\n          _this3.emitReserved(\"reconnect_attempt\", self.backoff.attempts); // check again for the case socket closed in above events\n\n\n          if (self.skipReconnect) return;\n          self.open(function (err) {\n            if (err) {\n              debug(\"reconnect attempt error\");\n              self._reconnecting = false;\n              self.reconnect();\n\n              _this3.emitReserved(\"reconnect_error\", err);\n            } else {\n              debug(\"reconnect success\");\n              self.onreconnect();\n            }\n          });\n        }, delay);\n\n        if (this.opts.autoUnref) {\n          timer.unref();\n        }\n\n        this.subs.push(function subDestroy() {\n          clearTimeout(timer);\n        });\n      }\n    }\n    /**\n     * Called upon successful reconnect.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onreconnect\",\n    value: function onreconnect() {\n      var attempt = this.backoff.attempts;\n      this._reconnecting = false;\n      this.backoff.reset();\n      this.emitReserved(\"reconnect\", attempt);\n    }\n  }]);\n\n  return Manager;\n}(typed_events_1.StrictEventEmitter);\n\nexports.Manager = Manager;","map":{"version":3,"sources":["D:/Project Web/Project Web/PROJECT 12 (Only MERN)/Client/node_modules/socket.io-client/build/manager.js"],"names":["Object","defineProperty","exports","value","Manager","eio","require","util_1","socket_1","parser","on_1","Backoff","typed_events_1","debug","uri","opts","_a","nsps","subs","undefined","path","installTimerFunctions","reconnection","reconnectionAttempts","Infinity","reconnectionDelay","reconnectionDelayMax","randomizationFactor","backoff","min","max","jitter","timeout","_readyState","_parser","encoder","Encoder","decoder","Decoder","_autoConnect","autoConnect","open","v","arguments","length","_reconnection","_reconnectionAttempts","_reconnectionDelay","setMin","_randomizationFactor","setJitter","_reconnectionDelayMax","setMax","_timeout","_reconnecting","attempts","reconnect","fn","indexOf","engine","socket","self","skipReconnect","openSubDestroy","on","onopen","errorSub","err","cleanup","emitReserved","maybeReconnectOnOpen","timer","setTimeoutFn","close","emit","Error","autoUnref","unref","push","subDestroy","clearTimeout","onping","bind","ondata","onerror","onclose","ondecoded","data","add","packet","nsp","Socket","keys","active","_close","encodedPackets","encode","i","write","options","forEach","destroy","reset","reason","delay","duration","onreconnect","attempt","StrictEventEmitter"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Manager = void 0;\nconst eio = require(\"engine.io-client\");\nconst util_1 = require(\"engine.io-client/lib/util\");\nconst socket_1 = require(\"./socket\");\nconst parser = require(\"socket.io-parser\");\nconst on_1 = require(\"./on\");\nconst Backoff = require(\"backo2\");\nconst typed_events_1 = require(\"./typed-events\");\nconst debug = require(\"debug\")(\"socket.io-client:manager\");\nclass Manager extends typed_events_1.StrictEventEmitter {\n    constructor(uri, opts) {\n        var _a;\n        super();\n        this.nsps = {};\n        this.subs = [];\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = undefined;\n        }\n        opts = opts || {};\n        opts.path = opts.path || \"/socket.io\";\n        this.opts = opts;\n        (0, util_1.installTimerFunctions)(this, opts);\n        this.reconnection(opts.reconnection !== false);\n        this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n        this.reconnectionDelay(opts.reconnectionDelay || 1000);\n        this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n        this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\n        this.backoff = new Backoff({\n            min: this.reconnectionDelay(),\n            max: this.reconnectionDelayMax(),\n            jitter: this.randomizationFactor(),\n        });\n        this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n        this._readyState = \"closed\";\n        this.uri = uri;\n        const _parser = opts.parser || parser;\n        this.encoder = new _parser.Encoder();\n        this.decoder = new _parser.Decoder();\n        this._autoConnect = opts.autoConnect !== false;\n        if (this._autoConnect)\n            this.open();\n    }\n    reconnection(v) {\n        if (!arguments.length)\n            return this._reconnection;\n        this._reconnection = !!v;\n        return this;\n    }\n    reconnectionAttempts(v) {\n        if (v === undefined)\n            return this._reconnectionAttempts;\n        this._reconnectionAttempts = v;\n        return this;\n    }\n    reconnectionDelay(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelay;\n        this._reconnectionDelay = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n        return this;\n    }\n    randomizationFactor(v) {\n        var _a;\n        if (v === undefined)\n            return this._randomizationFactor;\n        this._randomizationFactor = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n        return this;\n    }\n    reconnectionDelayMax(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelayMax;\n        this._reconnectionDelayMax = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n        return this;\n    }\n    timeout(v) {\n        if (!arguments.length)\n            return this._timeout;\n        this._timeout = v;\n        return this;\n    }\n    /**\n     * Starts trying to reconnect if reconnection is enabled and we have not\n     * started reconnecting yet\n     *\n     * @private\n     */\n    maybeReconnectOnOpen() {\n        // Only try to reconnect if it's the first time we're connecting\n        if (!this._reconnecting &&\n            this._reconnection &&\n            this.backoff.attempts === 0) {\n            // keeps reconnection from firing twice for the same reconnection loop\n            this.reconnect();\n        }\n    }\n    /**\n     * Sets the current transport `socket`.\n     *\n     * @param {Function} fn - optional, callback\n     * @return self\n     * @public\n     */\n    open(fn) {\n        debug(\"readyState %s\", this._readyState);\n        if (~this._readyState.indexOf(\"open\"))\n            return this;\n        debug(\"opening %s\", this.uri);\n        this.engine = eio(this.uri, this.opts);\n        const socket = this.engine;\n        const self = this;\n        this._readyState = \"opening\";\n        this.skipReconnect = false;\n        // emit `open`\n        const openSubDestroy = (0, on_1.on)(socket, \"open\", function () {\n            self.onopen();\n            fn && fn();\n        });\n        // emit `error`\n        const errorSub = (0, on_1.on)(socket, \"error\", (err) => {\n            debug(\"error\");\n            self.cleanup();\n            self._readyState = \"closed\";\n            this.emitReserved(\"error\", err);\n            if (fn) {\n                fn(err);\n            }\n            else {\n                // Only do this if there is no fn to handle the error\n                self.maybeReconnectOnOpen();\n            }\n        });\n        if (false !== this._timeout) {\n            const timeout = this._timeout;\n            debug(\"connect attempt will timeout after %d\", timeout);\n            if (timeout === 0) {\n                openSubDestroy(); // prevents a race condition with the 'open' event\n            }\n            // set timer\n            const timer = this.setTimeoutFn(() => {\n                debug(\"connect attempt timed out after %d\", timeout);\n                openSubDestroy();\n                socket.close();\n                socket.emit(\"error\", new Error(\"timeout\"));\n            }, timeout);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(function subDestroy() {\n                clearTimeout(timer);\n            });\n        }\n        this.subs.push(openSubDestroy);\n        this.subs.push(errorSub);\n        return this;\n    }\n    /**\n     * Alias for open()\n     *\n     * @return self\n     * @public\n     */\n    connect(fn) {\n        return this.open(fn);\n    }\n    /**\n     * Called upon transport open.\n     *\n     * @private\n     */\n    onopen() {\n        debug(\"open\");\n        // clear old subs\n        this.cleanup();\n        // mark as open\n        this._readyState = \"open\";\n        this.emitReserved(\"open\");\n        // add new subs\n        const socket = this.engine;\n        this.subs.push((0, on_1.on)(socket, \"ping\", this.onping.bind(this)), (0, on_1.on)(socket, \"data\", this.ondata.bind(this)), (0, on_1.on)(socket, \"error\", this.onerror.bind(this)), (0, on_1.on)(socket, \"close\", this.onclose.bind(this)), (0, on_1.on)(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n    }\n    /**\n     * Called upon a ping.\n     *\n     * @private\n     */\n    onping() {\n        this.emitReserved(\"ping\");\n    }\n    /**\n     * Called with data.\n     *\n     * @private\n     */\n    ondata(data) {\n        this.decoder.add(data);\n    }\n    /**\n     * Called when parser fully decodes a packet.\n     *\n     * @private\n     */\n    ondecoded(packet) {\n        this.emitReserved(\"packet\", packet);\n    }\n    /**\n     * Called upon socket error.\n     *\n     * @private\n     */\n    onerror(err) {\n        debug(\"error\", err);\n        this.emitReserved(\"error\", err);\n    }\n    /**\n     * Creates a new socket for the given `nsp`.\n     *\n     * @return {Socket}\n     * @public\n     */\n    socket(nsp, opts) {\n        let socket = this.nsps[nsp];\n        if (!socket) {\n            socket = new socket_1.Socket(this, nsp, opts);\n            this.nsps[nsp] = socket;\n        }\n        return socket;\n    }\n    /**\n     * Called upon a socket close.\n     *\n     * @param socket\n     * @private\n     */\n    _destroy(socket) {\n        const nsps = Object.keys(this.nsps);\n        for (const nsp of nsps) {\n            const socket = this.nsps[nsp];\n            if (socket.active) {\n                debug(\"socket %s is still active, skipping close\", nsp);\n                return;\n            }\n        }\n        this._close();\n    }\n    /**\n     * Writes a packet.\n     *\n     * @param packet\n     * @private\n     */\n    _packet(packet) {\n        debug(\"writing packet %j\", packet);\n        const encodedPackets = this.encoder.encode(packet);\n        for (let i = 0; i < encodedPackets.length; i++) {\n            this.engine.write(encodedPackets[i], packet.options);\n        }\n    }\n    /**\n     * Clean up transport subscriptions and packet buffer.\n     *\n     * @private\n     */\n    cleanup() {\n        debug(\"cleanup\");\n        this.subs.forEach((subDestroy) => subDestroy());\n        this.subs.length = 0;\n        this.decoder.destroy();\n    }\n    /**\n     * Close the current socket.\n     *\n     * @private\n     */\n    _close() {\n        debug(\"disconnect\");\n        this.skipReconnect = true;\n        this._reconnecting = false;\n        if (\"opening\" === this._readyState) {\n            // `onclose` will not fire because\n            // an open event never happened\n            this.cleanup();\n        }\n        this.backoff.reset();\n        this._readyState = \"closed\";\n        if (this.engine)\n            this.engine.close();\n    }\n    /**\n     * Alias for close()\n     *\n     * @private\n     */\n    disconnect() {\n        return this._close();\n    }\n    /**\n     * Called upon engine close.\n     *\n     * @private\n     */\n    onclose(reason) {\n        debug(\"onclose\");\n        this.cleanup();\n        this.backoff.reset();\n        this._readyState = \"closed\";\n        this.emitReserved(\"close\", reason);\n        if (this._reconnection && !this.skipReconnect) {\n            this.reconnect();\n        }\n    }\n    /**\n     * Attempt a reconnection.\n     *\n     * @private\n     */\n    reconnect() {\n        if (this._reconnecting || this.skipReconnect)\n            return this;\n        const self = this;\n        if (this.backoff.attempts >= this._reconnectionAttempts) {\n            debug(\"reconnect failed\");\n            this.backoff.reset();\n            this.emitReserved(\"reconnect_failed\");\n            this._reconnecting = false;\n        }\n        else {\n            const delay = this.backoff.duration();\n            debug(\"will wait %dms before reconnect attempt\", delay);\n            this._reconnecting = true;\n            const timer = this.setTimeoutFn(() => {\n                if (self.skipReconnect)\n                    return;\n                debug(\"attempting reconnect\");\n                this.emitReserved(\"reconnect_attempt\", self.backoff.attempts);\n                // check again for the case socket closed in above events\n                if (self.skipReconnect)\n                    return;\n                self.open((err) => {\n                    if (err) {\n                        debug(\"reconnect attempt error\");\n                        self._reconnecting = false;\n                        self.reconnect();\n                        this.emitReserved(\"reconnect_error\", err);\n                    }\n                    else {\n                        debug(\"reconnect success\");\n                        self.onreconnect();\n                    }\n                });\n            }, delay);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(function subDestroy() {\n                clearTimeout(timer);\n            });\n        }\n    }\n    /**\n     * Called upon successful reconnect.\n     *\n     * @private\n     */\n    onreconnect() {\n        const attempt = this.backoff.attempts;\n        this._reconnecting = false;\n        this.backoff.reset();\n        this.emitReserved(\"reconnect\", attempt);\n    }\n}\nexports.Manager = Manager;\n"]},"metadata":{},"sourceType":"script"}