{"ast":null,"code":"import { deleteAPI, postAPI } from \"../../apis/Axios\";\nexport const createComment = (auth, newComment, post, posts) => async dispatch => {\n  try {\n    const data = { ...newComment,\n      postId: post._id,\n      postUserId: post.user._id\n    };\n    const res = await postAPI('comment', data, auth.token); // logic\n\n    console.log(res.data);\n    const newData = { ...res.data.newComment,\n      user: auth.user\n    };\n    const newPost = { ...post,\n      comments: [...post.comments, newData]\n    };\n    let newPosts = [];\n\n    for (let i = 0; i < posts.length; i++) {\n      if (posts[i]._id === post._id) newPosts.push(newPost);else newPosts.push(posts[i]);\n    }\n\n    dispatch({\n      type: 'UPDATE_POST',\n      payload: newPosts\n    });\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const deleteComment = (auth, comment, post, posts) => async dispatch => {\n  try {\n    // delete the main and reply comments\n    const deleteArr = [...post.comments.filter(cmt => cmt.reply === comment._id), comment]; // logic\n\n    const newPost = { ...post,\n      comments: post.comments.filter(cmt => !deleteArr.find(deletedCmt => cmt._id === deletedCmt._id))\n    };\n    let newPosts = [];\n\n    for (let i = 0; i < posts.length; i++) {\n      if (posts[i]._id === post._id) newPosts.push(newPost);else newPosts.push(posts[i]);\n    }\n\n    dispatch({\n      type: 'UPDATE_POST',\n      payload: newPosts\n    });\n    deleteArr.forEach(item => {\n      deleteAPI(`comment/${item._id}`, auth.token);\n    });\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["D:/Project Web/PROJECT 12 (Only MERN)/Client/client/src/store/actions/commentAction.js"],"names":["deleteAPI","postAPI","createComment","auth","newComment","post","posts","dispatch","data","postId","_id","postUserId","user","res","token","console","log","newData","newPost","comments","newPosts","i","length","push","type","payload","err","error","response","msg","deleteComment","comment","deleteArr","filter","cmt","reply","find","deletedCmt","forEach","item"],"mappings":"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","sourcesContent":["import { deleteAPI, postAPI } from \"../../apis/Axios\";\r\n\r\nexport const createComment = (auth, newComment, post, posts) => async (dispatch) => {\r\n    try {\r\n        const data = {...newComment, postId: post._id, postUserId: post.user._id}\r\n        const res = await postAPI('comment', data, auth.token);\r\n\r\n        // logic\r\n        console.log(res.data);\r\n        const newData = {...res.data.newComment, user: auth.user};\r\n        const newPost = {...post, comments: [...post.comments, newData]};\r\n\r\n        let newPosts = [];\r\n\r\n        for (let i = 0; i<posts.length; i++) {\r\n            if(posts[i]._id === post._id) newPosts.push(newPost);\r\n            else newPosts.push(posts[i]);\r\n        }\r\n\r\n        dispatch({type: 'UPDATE_POST', payload: newPosts});\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}});\r\n    }\r\n}\r\n\r\nexport const deleteComment = (auth, comment, post, posts) => async (dispatch) => {\r\n    try {\r\n        // delete the main and reply comments\r\n        const deleteArr = [...post.comments.filter(cmt=>cmt.reply===comment._id), comment];\r\n        // logic\r\n        const newPost = {...post, comments: post.comments.filter(cmt=>!deleteArr.find(deletedCmt=>cmt._id===deletedCmt._id))};\r\n        let newPosts = [];\r\n\r\n        for (let i = 0; i<posts.length; i++) {\r\n            if(posts[i]._id === post._id) newPosts.push(newPost);\r\n            else newPosts.push(posts[i])\r\n        }\r\n        dispatch({type: 'UPDATE_POST', payload: newPosts});\r\n\r\n        deleteArr.forEach(item=>{\r\n            deleteAPI(`comment/${item._id}`, auth.token);\r\n        })\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}});\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}