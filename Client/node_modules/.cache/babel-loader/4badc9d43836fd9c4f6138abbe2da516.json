{"ast":null,"code":"import { getAPI, patchAPI, postAPI } from '../../apis/Axios';\nimport { imageUpload } from '../../apis/Cloudinary';\nexport const createPost = (data, auth) => async dispatch => {\n  let media = [];\n\n  try {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        loading: true\n      }\n    });\n    if (data.image.length > 0) media = await imageUpload(data.image);\n    const res = await postAPI('post', {\n      body: data.body,\n      image: media\n    }, auth.token); // dispatch({type:'CREATE_POST'});\n\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getPosts = token => async dispatch => {\n  try {\n    const res = await getAPI('post', token);\n    dispatch({\n      type: 'GET_POSTS',\n      payload: res.data.posts\n    });\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const updatePost = (content, auth, id, profile) => async dispatch => {\n  try {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        loading: true\n      }\n    });\n    const res = await patchAPI(`post/${id}`, {\n      body: content\n    }, auth.token); // logic\n\n    let newPosts = [];\n\n    for (let i = 0; i < profile.posts.length; i++) {\n      if (profile.posts[i]._id !== id) newPosts.push(profile.posts[i]);\n    }\n\n    newPosts.push(res.data.newPost);\n    console.log(newPosts); // dispatch({ type: 'GET_USER_POSTS', payload: res.data.newPost});\n\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["D:/Project Web/PROJECT 12 (Only MERN)/Client/client/src/store/actions/postAction.js"],"names":["getAPI","patchAPI","postAPI","imageUpload","createPost","data","auth","dispatch","media","type","payload","loading","image","length","res","body","token","success","msg","err","error","response","getPosts","posts","updatePost","content","id","profile","newPosts","i","_id","push","newPost","console","log"],"mappings":"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","sourcesContent":["import {getAPI, patchAPI, postAPI} from '../../apis/Axios';\r\nimport {imageUpload} from '../../apis/Cloudinary';\r\n\r\nexport const createPost = (data,auth) => async (dispatch) => {\r\n    let media = [];\r\n    try {\r\n        dispatch({type: 'ALERT', payload: {loading: true}});\r\n        if(data.image.length > 0) media = await imageUpload(data.image);\r\n\r\n        const res = await postAPI('post', {body: data.body,image: media}, auth.token);\r\n        // dispatch({type:'CREATE_POST'});\r\n        dispatch({type: 'ALERT', payload: {success: res.data.msg}});\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const getPosts = (token) => async (dispatch) => {\r\n    try {\r\n        const res = await getAPI('post', token);\r\n        dispatch({type: 'GET_POSTS', payload: res.data.posts})\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const updatePost = (content, auth, id, profile) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: 'ALERT', payload: {loading: true} });\r\n        const res = await patchAPI(`post/${id}`, {body: content}, auth.token);\r\n\r\n        // logic\r\n        let newPosts = [];\r\n        for (let i = 0; i< profile.posts.length; i++) {\r\n            if(profile.posts[i]._id !== id) newPosts.push(profile.posts[i]);\r\n        }\r\n        newPosts.push(res.data.newPost);\r\n        console.log(newPosts);\r\n\r\n        // dispatch({ type: 'GET_USER_POSTS', payload: res.data.newPost});\r\n        dispatch({ type: 'ALERT', payload: {success: res.data.msg} });\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}