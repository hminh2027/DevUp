{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project Web\\\\Project Web\\\\PROJECT 12 (Only MERN)\\\\Client\\\\client\\\\src\\\\components\\\\util\\\\InfiniteList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getPosts } from '../../store/actions/postAction';\nimport PostCard from '../post/PostCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst InfiniteList = ({\n  postShow,\n  setPostShow\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    auth,\n    post\n  } = useSelector(state => state);\n  const [loadMore, setLoadMore] = useState(true);\n  useEffect(() => {\n    getData(loadMore);\n    setLoadMore(false);\n  }, [loadMore]);\n  useEffect(() => {\n    const list = document.getElementById('list');\n\n    if (postShow.scrollable) {\n      // list has fixed height\n      list.addEventListener('scroll', e => {\n        const el = e.target;\n\n        if (el.scrollTop + el.clientHeight === el.scrollHeight) {\n          setLoadMore(true);\n        }\n      });\n    } else {\n      // list has auto height  \n      window.addEventListener('scroll', () => {\n        if (window.scrollY + window.innerHeight === list.clientHeight + list.offsetTop) {\n          setLoadMore(true);\n        }\n      });\n    }\n  }, []);\n  useEffect(() => {\n    const list = document.getElementById('list');\n\n    if (list.clientHeight <= window.innerHeight && list.clientHeight) {\n      setLoadMore(true);\n    }\n  }, [postShow]);\n\n  const getData = load => {\n    if (load) {\n      // dispatch(getPosts(auth));\n      // setPostShow(post.posts);\n      console.log('load more');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"list\",\n    children: postShow.map(post => /*#__PURE__*/_jsxDEV(PostCard, {\n      post: post\n    }, post._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n\n_s(InfiniteList, \"K6fUESkLC90J/mI1dfW2E/uyze0=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = InfiniteList;\nexport default InfiniteList;\n\nvar _c;\n\n$RefreshReg$(_c, \"InfiniteList\");","map":{"version":3,"sources":["D:/Project Web/Project Web/PROJECT 12 (Only MERN)/Client/client/src/components/util/InfiniteList.js"],"names":["React","useEffect","useState","useDispatch","useSelector","getPosts","PostCard","InfiniteList","postShow","setPostShow","dispatch","auth","post","state","loadMore","setLoadMore","getData","list","document","getElementById","scrollable","addEventListener","e","el","target","scrollTop","clientHeight","scrollHeight","window","scrollY","innerHeight","offsetTop","load","console","log","map","_id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,QAAT,QAAyB,gCAAzB;AACA,OAAOC,QAAP,MAAqB,kBAArB;;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAWC,EAAAA;AAAX,CAAD,KAA6B;AAAA;;AAC9C,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,QAAM;AAACQ,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAeR,WAAW,CAACS,KAAK,IAAEA,KAAR,CAAhC;AAEA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,IAAD,CAAxC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZe,IAAAA,OAAO,CAACF,QAAD,CAAP;AACAC,IAAAA,WAAW,CAAC,KAAD,CAAX;AACD,GAHM,EAGJ,CAACD,QAAD,CAHI,CAAT;AAKEb,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,IAAI,GAAGC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAb;;AACA,QAAGX,QAAQ,CAACY,UAAZ,EAAwB;AACtB;AACAH,MAAAA,IAAI,CAACI,gBAAL,CAAsB,QAAtB,EAAiCC,CAAD,IAAO;AACrC,cAAMC,EAAE,GAAGD,CAAC,CAACE,MAAb;;AACA,YAAGD,EAAE,CAACE,SAAH,GAAeF,EAAE,CAACG,YAAlB,KAAmCH,EAAE,CAACI,YAAzC,EAAuD;AACrDZ,UAAAA,WAAW,CAAC,IAAD,CAAX;AACD;AACF,OALD;AAMD,KARD,MAQO;AACL;AACAa,MAAAA,MAAM,CAACP,gBAAP,CAAwB,QAAxB,EAAkC,MAAM;AACtC,YAAIO,MAAM,CAACC,OAAP,GAAiBD,MAAM,CAACE,WAAxB,KAAwCb,IAAI,CAACS,YAAL,GAAoBT,IAAI,CAACc,SAArE,EAAgF;AAC9EhB,UAAAA,WAAW,CAAC,IAAD,CAAX;AACD;AACF,OAJD;AAKD;AACF,GAlBQ,EAkBN,EAlBM,CAAT;AAoBAd,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,IAAI,GAAGC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAb;;AAEA,QAAGF,IAAI,CAACS,YAAL,IAAqBE,MAAM,CAACE,WAA5B,IAA2Cb,IAAI,CAACS,YAAnD,EAAiE;AAC/DX,MAAAA,WAAW,CAAC,IAAD,CAAX;AACD;AACF,GANQ,EAMN,CAACP,QAAD,CANM,CAAT;;AAQA,QAAMQ,OAAO,GAAIgB,IAAD,IAAU;AACxB,QAAIA,IAAJ,EAAU;AACN;AACA;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACH;AACF,GAND;;AAQF,sBACI;AAAK,IAAA,EAAE,EAAC,MAAR;AAAA,cACK1B,QAAQ,CAAC2B,GAAT,CAAavB,IAAI,iBACd,QAAC,QAAD;AAAyB,MAAA,IAAI,EAAEA;AAA/B,OAAeA,IAAI,CAACwB,GAApB;AAAA;AAAA;AAAA;AAAA,YADH;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CAvDD;;GAAM7B,Y;UACeJ,W,EACIC,W;;;KAFnBG,Y;AAyDN,eAAeA,YAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getPosts } from '../../store/actions/postAction';\r\nimport PostCard from '../post/PostCard'\r\n\r\nconst InfiniteList = ({postShow, setPostShow}) => {\r\n    const dispatch = useDispatch();\r\n    const {auth, post} = useSelector(state=>state);\r\n\r\n    const [loadMore, setLoadMore] = useState(true);\r\n\r\n    useEffect(() => {\r\n        getData(loadMore);\r\n        setLoadMore(false);\r\n      }, [loadMore]);\r\n\r\n      useEffect(() => {\r\n        const list = document.getElementById('list')\r\n        if(postShow.scrollable) {   \r\n          // list has fixed height\r\n          list.addEventListener('scroll', (e) => {\r\n            const el = e.target;\r\n            if(el.scrollTop + el.clientHeight === el.scrollHeight) {\r\n              setLoadMore(true);\r\n            }\r\n          });  \r\n        } else {  \r\n          // list has auto height  \r\n          window.addEventListener('scroll', () => {\r\n            if (window.scrollY + window.innerHeight === list.clientHeight + list.offsetTop) {\r\n              setLoadMore(true);\r\n            }\r\n          });\r\n        }\r\n      }, []);\r\n\r\n      useEffect(() => {\r\n        const list = document.getElementById('list');\r\n    \r\n        if(list.clientHeight <= window.innerHeight && list.clientHeight) {\r\n          setLoadMore(true);\r\n        }\r\n      }, [postShow]);\r\n\r\n      const getData = (load) => {\r\n        if (load) {\r\n            // dispatch(getPosts(auth));\r\n            // setPostShow(post.posts);\r\n            console.log('load more')\r\n        }\r\n      };\r\n\r\n    return (\r\n        <div id='list'>\r\n            {postShow.map(post=>(\r\n                <PostCard key={post._id} post={post} />\r\n            ))}\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default InfiniteList\r\n"]},"metadata":{},"sourceType":"module"}