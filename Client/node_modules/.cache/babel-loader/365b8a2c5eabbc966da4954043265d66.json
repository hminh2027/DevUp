{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project Web\\\\PROJECT 12 (Only MERN)\\\\Client\\\\client\\\\src\\\\components\\\\post\\\\comment\\\\InputComment.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport RoundWrapper from '../../util/RoundWrapper';\nimport { createComment } from '../../../store/actions/commentAction';\nimport ContentEditable from 'react-contenteditable';\nimport styles from './InputComment.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst InputComment = ({\n  onReply,\n  setOnReply,\n  post\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [body, setBody] = useState('');\n  const [onSubmit, setOnSubmit] = useState(false);\n  const {\n    auth,\n    socket\n  } = useSelector(state => state);\n  const posts = useSelector(state => state.post.posts);\n  useEffect(() => {\n    if (onSubmit) submitHandler();\n  }, [onSubmit]); // useEffect(()=>{\n  //     if(onReply) setBody(onReply.user.username);\n  // },[onReply])\n\n  const submitHandler = () => {\n    const trimBody = body.trim();\n    if (trimBody == '') return;\n    const newComment = {\n      body: trimBody,\n      user: auth.user,\n      createdAt: new Date().toISOString(),\n      reply: onReply && (onReply.reply ? onReply.reply : onReply._id),\n      tag: onReply && onReply.user\n    };\n    dispatch(createComment(auth, newComment, post, posts, socket));\n    setBody('');\n    setOnSubmit(false);\n  };\n\n  const inputHandler = e => {\n    if (e.charCode == 13) {\n      e.preventDefault();\n      setOnSubmit(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.avatar,\n      children: /*#__PURE__*/_jsxDEV(RoundWrapper, {\n        diameter: \"50px\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: auth.user.avatar\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.input_wrapper,\n      children: /*#__PURE__*/_jsxDEV(TextareaAutosize, {\n        onKeyPress: inputHandler,\n        spellCheck: \"false\",\n        onChange: e => setBody(e.target.value),\n        className: styles.input,\n        placeholder: \"Write your comment here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n\n_s(InputComment, \"NLn7TSeux0gMmfNSAGKBSqEtYbE=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = InputComment;\nexport default InputComment;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputComment\");","map":{"version":3,"sources":["D:/Project Web/PROJECT 12 (Only MERN)/Client/client/src/components/post/comment/InputComment.js"],"names":["React","useEffect","useState","useSelector","useDispatch","TextareaAutosize","RoundWrapper","createComment","ContentEditable","styles","InputComment","onReply","setOnReply","post","dispatch","body","setBody","onSubmit","setOnSubmit","auth","socket","state","posts","submitHandler","trimBody","trim","newComment","user","createdAt","Date","toISOString","reply","_id","tag","inputHandler","e","charCode","preventDefault","container","avatar","input_wrapper","target","value","input"],"mappings":"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","sourcesContent":["import React, {useEffect, useState } from 'react'\r\nimport {useSelector, useDispatch} from 'react-redux'\r\nimport TextareaAutosize from 'react-textarea-autosize'\r\nimport RoundWrapper from '../../util/RoundWrapper'\r\nimport {createComment} from '../../../store/actions/commentAction'\r\nimport ContentEditable from 'react-contenteditable'\r\nimport styles from './InputComment.module.css'\r\n\r\nconst InputComment = ({onReply, setOnReply, post}) => {\r\n    const dispatch = useDispatch();\r\n    const [body, setBody] = useState('');\r\n    const [onSubmit, setOnSubmit] = useState(false);\r\n    const {auth, socket} = useSelector(state=>state);\r\n    const posts = useSelector(state=>state.post.posts);\r\n\r\n    useEffect(()=>{\r\n        if(onSubmit) submitHandler();\r\n    },[onSubmit])\r\n\r\n    // useEffect(()=>{\r\n    //     if(onReply) setBody(onReply.user.username);\r\n    // },[onReply])\r\n\r\n    const submitHandler = () => {\r\n        const trimBody = body.trim();\r\n        if(trimBody=='') return;\r\n        const newComment = {\r\n            body: trimBody,\r\n            user: auth.user,\r\n            createdAt: new Date().toISOString(),\r\n            reply: onReply && (onReply.reply ? onReply.reply : onReply._id),\r\n            tag: onReply && onReply.user\r\n        }\r\n        dispatch(createComment(auth, newComment, post, posts, socket));\r\n        setBody('');\r\n        setOnSubmit(false);\r\n    }\r\n\r\n    const inputHandler = (e) => {\r\n        if(e.charCode == 13) {\r\n            e.preventDefault();\r\n            setOnSubmit(true);\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <form onSubmit={submitHandler} className={styles.container}>\r\n            <div className={styles.avatar}>\r\n                <RoundWrapper diameter='50px' >\r\n                    <img src={auth.user.avatar} />\r\n                </RoundWrapper>\r\n            </div>\r\n            <div className={styles.input_wrapper}>\r\n                {/* <ContentEditable data-placeholder='Write your comment here...' className={styles.input} onKeyPress={inputHandler} spellCheck='false' onChange={e=>setBody(e.target.value)} html={body} tagName=\"label\" />        */}\r\n                <TextareaAutosize onKeyPress={inputHandler} spellCheck='false' onChange={e=>setBody(e.target.value)} className={styles.input} placeholder='Write your comment here...' />\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default InputComment\r\n"]},"metadata":{},"sourceType":"module"}