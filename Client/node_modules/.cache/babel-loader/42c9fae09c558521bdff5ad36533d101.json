{"ast":null,"code":"import _objectSpread from\"D:/Project Web/Project Web/PROJECT 12 (Only MERN)/Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"D:/Project Web/Project Web/PROJECT 12 (Only MERN)/Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import ReactDOM from'react-dom';import{useSelector}from'react-redux';import{ToastContainer,toast}from'react-toastify';import{Toast}from'./Toast';import Loading from'./Loading';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";toast.configure();function Alert(){var _useSelector=useSelector(function(state){return state;}),alert=_useSelector.alert;var _useState=useState({loading:false,success:'',error:'',warn:''}),_useState2=_slicedToArray(_useState,2),alertType=_useState2[0],setAlertType=_useState2[1];useEffect(function(){if(alert==alertType){setAlertType(_objectSpread(_objectSpread({},alertType),{},{success:'',error:'',warn:''}));}},[alertType]);useEffect(function(){setAlertType(alert);},[alert]);return/*#__PURE__*/_jsxs(_Fragment,{children:[alertType.loading&&/*#__PURE__*/ReactDOM.createPortal(/*#__PURE__*/_jsx(Loading,{}),portal),alertType.success&&/*#__PURE__*/_jsx(Toast,{type:\"success\",body:alertType.success}),alertType.error&&/*#__PURE__*/_jsx(Toast,{type:\"error\",body:alertType.error}),alertType.warn&&/*#__PURE__*/_jsx(Toast,{color:\"black\",type:\"warn\",body:alertType.warn}),/*#__PURE__*/_jsx(Toast,{}),/*#__PURE__*/_jsx(ToastContainer,{position:\"bottom-right\",autoClose:5000,hideProgressBar:true,newestOnTop:true,closeOnClick:true,rtl:false,pauseOnFocusLoss:true,draggable:true,pauseOnHover:true})]});}export default Alert;","map":{"version":3,"sources":["D:/Project Web/Project Web/PROJECT 12 (Only MERN)/Client/src/components/alert/Alert.js"],"names":["React","useEffect","useState","ReactDOM","useSelector","ToastContainer","toast","Toast","Loading","configure","Alert","state","alert","loading","success","error","warn","alertType","setAlertType","createPortal","portal"],"mappings":"6VAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA0BC,QAA1B,KAA0C,OAA1C,CACA,MAAOC,CAAAA,QAAP,KAAqB,WAArB,CACA,OAAQC,WAAR,KAA0B,aAA1B,CAEA,OAASC,cAAT,CAAyBC,KAAzB,KAAsC,gBAAtC,CACA,OAAQC,KAAR,KAAoB,SAApB,CACA,MAAOC,CAAAA,OAAP,KAAoB,WAApB,C,6IACAF,KAAK,CAACG,SAAN,GAEA,QAASC,CAAAA,KAAT,EAAiB,CACb,iBAAgBN,WAAW,CAAC,SAAAO,KAAK,QAAIA,CAAAA,KAAJ,EAAN,CAA3B,CAAOC,KAAP,cAAOA,KAAP,CAEA,cAAkCV,QAAQ,CAAC,CACvCW,OAAO,CAAE,KAD8B,CAEvCC,OAAO,CAAE,EAF8B,CAGvCC,KAAK,CAAE,EAHgC,CAIvCC,IAAI,CAAE,EAJiC,CAAD,CAA1C,wCAAOC,SAAP,eAAkBC,YAAlB,eAOAjB,SAAS,CAAC,UAAI,CACV,GAAGW,KAAK,EAAIK,SAAZ,CAAsB,CAClBC,YAAY,gCACLD,SADK,MAERH,OAAO,CAAE,EAFD,CAGRC,KAAK,CAAE,EAHC,CAIRC,IAAI,CAAE,EAJE,GAAZ,CAMH,CAEJ,CAVQ,CAUP,CAACC,SAAD,CAVO,CAAT,CAYAhB,SAAS,CAAC,UAAI,CACViB,YAAY,CAACN,KAAD,CAAZ,CACH,CAFQ,CAEP,CAACA,KAAD,CAFO,CAAT,CAIA,mBACI,2BACKK,SAAS,CAACJ,OAAV,eAAqBV,QAAQ,CAACgB,YAAT,cAAsB,KAAC,OAAD,IAAtB,CAAkCC,MAAlC,CAD1B,CAEKH,SAAS,CAACH,OAAV,eAAsB,KAAC,KAAD,EAAO,IAAI,CAAC,SAAZ,CAAsB,IAAI,CAAEG,SAAS,CAACH,OAAtC,EAF3B,CAGKG,SAAS,CAACF,KAAV,eAAoB,KAAC,KAAD,EAAO,IAAI,CAAC,OAAZ,CAAoB,IAAI,CAAEE,SAAS,CAACF,KAApC,EAHzB,CAIKE,SAAS,CAACD,IAAV,eAAmB,KAAC,KAAD,EAAO,KAAK,CAAC,OAAb,CAAqB,IAAI,CAAC,MAA1B,CAAiC,IAAI,CAAEC,SAAS,CAACD,IAAjD,EAJxB,cAKI,KAAC,KAAD,IALJ,cAMI,KAAC,cAAD,EACI,QAAQ,CAAC,cADb,CAEI,SAAS,CAAE,IAFf,CAGI,eAAe,KAHnB,CAII,WAAW,KAJf,CAKI,YAAY,KALhB,CAMI,GAAG,CAAE,KANT,CAOI,gBAAgB,KAPpB,CAQI,SAAS,KARb,CASI,YAAY,KAThB,EANJ,GADJ,CAoBH,CAGD,cAAeN,CAAAA,KAAf","sourcesContent":["import React, { useEffect,useState } from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport {useSelector} from 'react-redux'\r\n\r\nimport { ToastContainer, toast } from 'react-toastify'\r\nimport {Toast} from './Toast'\r\nimport Loading from './Loading'\r\ntoast.configure()\r\n\r\nfunction Alert() {\r\n    const {alert} = useSelector(state => state)\r\n\r\n    const [alertType, setAlertType] = useState({\r\n        loading: false,\r\n        success: '',\r\n        error: '',\r\n        warn: ''\r\n    })\r\n\r\n    useEffect(()=>{\r\n        if(alert == alertType){\r\n            setAlertType({\r\n                ...alertType,\r\n                success: '',\r\n                error: '',\r\n                warn: ''\r\n            })\r\n        }\r\n        \r\n    },[alertType])\r\n\r\n    useEffect(()=>{\r\n        setAlertType(alert)\r\n    },[alert])\r\n    \r\n    return (\r\n        <>\r\n            {alertType.loading && ReactDOM.createPortal(<Loading/>, portal)}      \r\n            {alertType.success &&  <Toast type=\"success\" body={alertType.success} />}\r\n            {alertType.error &&  <Toast type=\"error\" body={alertType.error} />}\r\n            {alertType.warn &&  <Toast color='black' type=\"warn\" body={alertType.warn} />}\r\n            <Toast/>\r\n            <ToastContainer\r\n                position=\"bottom-right\"\r\n                autoClose={5000}\r\n                hideProgressBar\r\n                newestOnTop\r\n                closeOnClick\r\n                rtl={false}\r\n                pauseOnFocusLoss\r\n                draggable\r\n                pauseOnHover\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default Alert\r\n"]},"metadata":{},"sourceType":"module"}