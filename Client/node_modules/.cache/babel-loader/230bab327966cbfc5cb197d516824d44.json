{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project Web\\\\Project Web\\\\PROJECT 12 (Only MERN)\\\\Client\\\\client\\\\src\\\\components\\\\util\\\\InfiniteList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getAPI } from '../../apis/Axios';\nimport { useMediaQuery } from 'react-responsive';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst InfiniteList = ({\n  list,\n  elem,\n  id,\n  children,\n  api,\n  action\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    auth\n  } = useSelector(state => state);\n  const isDesktop = useMediaQuery({\n    query: '(min-width: 1224px)'\n  });\n  const [page, setPage] = useState(1);\n  const [load, setLoad] = useState(false);\n\n  const getData = () => {\n    setPage(page + 1);\n    setLoad(true);\n  };\n\n  useEffect(async () => {\n    if (load) {\n      console.log('run');\n      let res;\n      id ? res = await getAPI(`${api}/${id}?page=${page}`, auth.token) : res = await getAPI(`${api}?page=${page}`, auth.token);\n      setLoad(false);\n      if (res.data.posts.length === 0) return;\n      dispatch({\n        type: `${action}`,\n        payload: res.data.posts\n      });\n    }\n  }, [load]);\n  return /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n    dataLength: list.length,\n    next: getData,\n    hasMore: true,\n    scrollableTarget: elem,\n    style: isDesktop ? {\n      padding: '0 1rem',\n      margin: '0 -1rem',\n      overflow: 'unset'\n    } : {},\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n\n_s(InfiniteList, \"wz9ViJvnrnidEEksJ0OjCrU9DcU=\", false, function () {\n  return [useDispatch, useSelector, useMediaQuery];\n});\n\n_c = InfiniteList;\nexport default InfiniteList;\n\nvar _c;\n\n$RefreshReg$(_c, \"InfiniteList\");","map":{"version":3,"sources":["D:/Project Web/Project Web/PROJECT 12 (Only MERN)/Client/client/src/components/util/InfiniteList.js"],"names":["React","useEffect","useState","useDispatch","useSelector","getAPI","useMediaQuery","InfiniteScroll","InfiniteList","list","elem","id","children","api","action","dispatch","auth","state","isDesktop","query","page","setPage","load","setLoad","getData","console","log","res","token","data","posts","length","type","payload","padding","margin","overflow"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,OAAOC,cAAP,MAA2B,iCAA3B;;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA,IAAP;AAAaC,EAAAA,EAAb;AAAiBC,EAAAA,QAAjB;AAA2BC,EAAAA,GAA3B;AAAgCC,EAAAA;AAAhC,CAAD,KAA6C;AAAA;;AAC9D,QAAMC,QAAQ,GAAGZ,WAAW,EAA5B;AACA,QAAM;AAACa,IAAAA;AAAD,MAASZ,WAAW,CAACa,KAAK,IAAEA,KAAR,CAA1B;AAEA,QAAMC,SAAS,GAAGZ,aAAa,CAAC;AAAEa,IAAAA,KAAK,EAAE;AAAT,GAAD,CAA/B;AAEA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBnB,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACoB,IAAD,EAAOC,OAAP,IAAkBrB,QAAQ,CAAC,KAAD,CAAhC;;AAEA,QAAMsB,OAAO,GAAG,MAAM;AAClBH,IAAAA,OAAO,CAACD,IAAI,GAAC,CAAN,CAAP;AACAG,IAAAA,OAAO,CAAC,IAAD,CAAP;AACH,GAHD;;AAKAtB,EAAAA,SAAS,CAAC,YAAU;AAChB,QAAGqB,IAAH,EAAS;AACLG,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACA,UAAIC,GAAJ;AACAhB,MAAAA,EAAE,GACFgB,GAAG,GAAG,MAAMtB,MAAM,CAAE,GAAEQ,GAAI,IAAGF,EAAG,SAAQS,IAAK,EAA3B,EAA8BJ,IAAI,CAACY,KAAnC,CADhB,GAGFD,GAAG,GAAG,MAAMtB,MAAM,CAAE,GAAEQ,GAAI,SAAQO,IAAK,EAArB,EAAwBJ,IAAI,CAACY,KAA7B,CAHlB;AAIAL,MAAAA,OAAO,CAAC,KAAD,CAAP;AACA,UAAGI,GAAG,CAACE,IAAJ,CAASC,KAAT,CAAeC,MAAf,KAAwB,CAA3B,EAA8B;AAC9BhB,MAAAA,QAAQ,CAAC;AAACiB,QAAAA,IAAI,EAAG,GAAElB,MAAO,EAAjB;AAAoBmB,QAAAA,OAAO,EAAEN,GAAG,CAACE,IAAJ,CAASC;AAAtC,OAAD,CAAR;AACH;AACJ,GAZQ,EAYP,CAACR,IAAD,CAZO,CAAT;AAcA,sBACI,QAAC,cAAD;AACI,IAAA,UAAU,EAAEb,IAAI,CAACsB,MADrB;AAEI,IAAA,IAAI,EAAEP,OAFV;AAGI,IAAA,OAAO,EAAE,IAHb;AAII,IAAA,gBAAgB,EAAEd,IAJtB;AAKI,IAAA,KAAK,EAAEQ,SAAS,GAAG;AAACgB,MAAAA,OAAO,EAAE,QAAV;AAAoBC,MAAAA,MAAM,EAAE,SAA5B;AAAuCC,MAAAA,QAAQ,EAAE;AAAjD,KAAH,GAA+D,EALnF;AAAA,cAOKxB;AAPL;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CAvCD;;GAAMJ,Y;UACeL,W,EACFC,W,EAEGE,a;;;KAJhBE,Y;AAyCN,eAAeA,YAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { getAPI } from '../../apis/Axios'\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport InfiniteScroll from 'react-infinite-scroll-component'\r\n\r\nconst InfiniteList = ({list, elem, id, children, api, action}) => {\r\n    const dispatch = useDispatch()\r\n    const {auth} = useSelector(state=>state)\r\n\r\n    const isDesktop = useMediaQuery({ query: '(min-width: 1224px)' })\r\n\r\n    const [page, setPage] = useState(1)\r\n    const [load, setLoad] = useState(false)\r\n\r\n    const getData = () => {\r\n        setPage(page+1)\r\n        setLoad(true)\r\n    }\r\n\r\n    useEffect(async ()=>{\r\n        if(load) {\r\n            console.log('run')\r\n            let res\r\n            id ? \r\n            res = await getAPI(`${api}/${id}?page=${page}`, auth.token)\r\n            :\r\n            res = await getAPI(`${api}?page=${page}`, auth.token)\r\n            setLoad(false)\r\n            if(res.data.posts.length===0) return\r\n            dispatch({type: `${action}`, payload: res.data.posts})\r\n        }\r\n    },[load])\r\n\r\n    return (\r\n        <InfiniteScroll\r\n            dataLength={list.length}\r\n            next={getData}\r\n            hasMore={true}\r\n            scrollableTarget={elem}\r\n            style={isDesktop ? {padding: '0 1rem', margin: '0 -1rem', overflow: 'unset'} : {}}\r\n        >\r\n            {children}\r\n        </InfiniteScroll>  \r\n    )\r\n}\r\n\r\nexport default InfiniteList\r\n"]},"metadata":{},"sourceType":"module"}