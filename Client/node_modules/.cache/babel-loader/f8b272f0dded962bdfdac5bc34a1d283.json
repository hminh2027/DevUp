{"ast":null,"code":"import { deleteAPI, getAPI, patchAPI, postAPI } from '../../apis/Axios';\nimport { imageUpload } from '../../apis/Cloudinary';\nimport { createNotice, deleteNotice } from './noticeAction';\nexport const createPost = (data, auth, socket) => async dispatch => {\n  let media = [];\n\n  try {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        loading: true\n      }\n    });\n    dispatch({\n      type: 'MODAL',\n      payload: true\n    });\n    if (data.image.length > 0) media = await imageUpload(data.image);\n    const res = await postAPI('post', {\n      body: data.body,\n      image: media\n    }, auth.token);\n    const newPost = { ...res.data.newPost,\n      user: auth.user\n    };\n    dispatch({\n      type: 'CREATE_POST',\n      payload: newPost\n    });\n    dispatch({\n      type: 'MODAL',\n      payload: false\n    });\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        success: res.data.msg\n      }\n    });\n    let msg = {\n      id: res.data.newPost._id,\n      receivers: newPost.user.followers,\n      url: res.data.newPost._id,\n      body: data.body,\n      tag: 'POST',\n      image: media.length > 0 ? media[0].url : ''\n    };\n    msg = { ...msg,\n      text: `${media.length > 0 ? 'add new image' : 'post a status'}`\n    };\n    dispatch(createNotice(auth, msg, socket));\n  } catch (err) {\n    dispatch({\n      type: 'MODAL',\n      payload: false\n    });\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getPosts = auth => async dispatch => {\n  try {\n    dispatch({\n      type: 'LOADING_POST',\n      payload: true\n    });\n    const res = await getAPI('post', auth.token);\n    dispatch({\n      type: 'GET_POSTS',\n      payload: res.data.posts\n    });\n    dispatch({\n      type: 'LOADING_POST',\n      payload: false\n    });\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getPost = (auth, id) => async dispatch => {\n  try {\n    dispatch({\n      type: 'LOADING_POST',\n      payload: true\n    });\n    const res = await getAPI(`post/${id}`, auth.token);\n    dispatch({\n      type: 'GET_POST',\n      payload: res.data.post\n    });\n    dispatch({\n      type: 'LOADING_POST',\n      payload: false\n    });\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const updatePost = (content, auth, id) => async dispatch => {\n  try {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        loading: true\n      }\n    });\n    dispatch({\n      type: 'MODAL',\n      payload: true\n    });\n    const res = await patchAPI(`post/${id}`, {\n      body: content\n    }, auth.token); // logic\n\n    dispatch({\n      type: 'UPDATE_POST',\n      payload: res.data.newPost\n    });\n    dispatch({\n      type: 'GET_POST',\n      payload: res.data.newPost\n    });\n    dispatch({\n      type: 'MODAL',\n      payload: false\n    });\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: 'MODAL',\n      payload: false\n    });\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const deletePost = (auth, id) => async dispatch => {\n  try {\n    const res = await deleteAPI(`post/${id}`, auth.token);\n    console.log(res);\n    dispatch({\n      type: 'DELETE_POST',\n      payload: res.data.post\n    });\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        success: res.data.msg\n      }\n    });\n    const msg = {\n      receivers: auth.user.followers.length > 0 && auth.user.followers,\n      url: id\n    };\n    dispatch(deleteNotice(auth, msg));\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const likePost = (auth, post, socket) => async dispatch => {\n  // logic\n  if (auth.user._id === post.user._id) return dispatch({\n    type: 'ALERT',\n    payload: {\n      warn: 'Dont like your own post! '\n    }\n  });\n  const newPost = { ...post,\n    likes: [...post.likes, auth.user]\n  };\n  dispatch({\n    type: 'UPDATE_POST',\n    payload: newPost\n  });\n  socket.emit('likePost', newPost);\n  const msg = {\n    id: auth.user._id,\n    receivers: auth.user.followers,\n    text: 'like your post!',\n    url: newPost._id,\n    tag: 'LIKE',\n    body: '',\n    image: newPost.image.length > 0 ? newPost.image[0].url : ''\n  };\n  dispatch(createNotice(auth, msg, socket));\n\n  try {\n    const res = await patchAPI(`post/${post._id}/like`, newPost, auth.token);\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const unlikePost = (auth, post, socket) => async dispatch => {\n  // logic\n  const newLikes = post.likes.filter(like => like._id !== auth.user._id);\n  const newPost = { ...post,\n    likes: newLikes\n  };\n  dispatch({\n    type: 'UPDATE_POST',\n    payload: newPost\n  });\n  socket.emit('unlikePost', newPost);\n\n  try {\n    const res = await patchAPI(`post/${post._id}/unlike`, null, auth.token);\n    const msg = {\n      id: auth.user._id,\n      receivers: [post.user._id],\n      url: post._id\n    };\n    dispatch(deleteNotice(auth, msg));\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["D:/Project Web/Project Web/PROJECT 12 (Only MERN)/Client/client/src/store/actions/postAction.js"],"names":["deleteAPI","getAPI","patchAPI","postAPI","imageUpload","createNotice","deleteNotice","createPost","data","auth","socket","dispatch","media","type","payload","loading","image","length","res","body","token","newPost","user","success","msg","id","_id","receivers","followers","url","tag","text","err","error","response","getPosts","posts","getPost","post","updatePost","content","deletePost","console","log","likePost","warn","likes","emit","unlikePost","newLikes","filter","like"],"mappings":"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","sourcesContent":["import {deleteAPI, getAPI, patchAPI, postAPI} from '../../apis/Axios'\r\nimport {imageUpload} from '../../apis/Cloudinary'\r\nimport {createNotice, deleteNotice} from './noticeAction'\r\n\r\nexport const createPost = (data, auth, socket) => async (dispatch) => {\r\n    let media = [];\r\n    try {\r\n        dispatch({type: 'ALERT', payload: {loading: true}});\r\n        dispatch({type: 'MODAL' , payload: true});\r\n        if(data.image.length > 0) media = await imageUpload(data.image);\r\n\r\n        const res = await postAPI('post', {body: data.body,image: media}, auth.token);\r\n        const newPost = {...res.data.newPost, user: auth.user};\r\n        dispatch({type:'CREATE_POST', payload: newPost});\r\n        dispatch({type: 'MODAL' , payload: false});\r\n        dispatch({type: 'ALERT', payload: {success: res.data.msg}});\r\n\r\n        let msg = {\r\n            id: res.data.newPost._id,\r\n            receivers: newPost.user.followers,\r\n            url: res.data.newPost._id,\r\n            body: data.body,\r\n            tag: 'POST',\r\n            image: media.length>0 ? media[0].url : ''\r\n        }\r\n        msg = {...msg, text: `${media.length>0 ? 'add new image' : 'post a status'}`}\r\n\r\n        dispatch(createNotice(auth, msg, socket));\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'MODAL' , payload: false});\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const getPosts = (auth) => async (dispatch) => {\r\n    try {\r\n        dispatch({type: 'LOADING_POST', payload: true})\r\n        const res = await getAPI('post', auth.token);\r\n        dispatch({type: 'GET_POSTS', payload: res.data.posts})\r\n        dispatch({type: 'LOADING_POST', payload: false})\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const getPost = (auth, id) => async (dispatch) => {\r\n    try {\r\n        dispatch({type: 'LOADING_POST', payload: true})\r\n        const res = await getAPI(`post/${id}`, auth.token)\r\n        dispatch({type: 'GET_POST', payload: res.data.post})\r\n        dispatch({type: 'LOADING_POST', payload: false})\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const updatePost = (content, auth, id) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: 'ALERT', payload: {loading: true} });\r\n        dispatch({type: 'MODAL' , payload: true});\r\n\r\n        const res = await patchAPI(`post/${id}`, {body: content}, auth.token);\r\n\r\n        // logic\r\n        dispatch({type: 'UPDATE_POST', payload: res.data.newPost});\r\n        dispatch({type: 'GET_POST', payload: res.data.newPost})\r\n        \r\n        dispatch({ type: 'MODAL' , payload: false});\r\n        dispatch({ type: 'ALERT', payload: {success: res.data.msg} });\r\n\r\n    } catch(err) {\r\n        dispatch({ type: 'MODAL' , payload: false});\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const deletePost = (auth, id) => async (dispatch) => {\r\n    try {\r\n        const res = await deleteAPI(`post/${id}`, auth.token);\r\n        console.log(res)\r\n        dispatch({type: 'DELETE_POST', payload: res.data.post});\r\n        dispatch({ type: 'ALERT', payload: {success: res.data.msg} });\r\n\r\n        const msg = {\r\n            receivers: auth.user.followers.length>0 && auth.user.followers,\r\n            url: id\r\n        }\r\n        dispatch(deleteNotice(auth, msg));\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const likePost = (auth, post, socket) => async (dispatch) => {\r\n    // logic\r\n    if(auth.user._id === post.user._id) return dispatch({type: 'ALERT', payload: {warn: 'Dont like your own post! '}});\r\n    const newPost = {...post, likes: [...post.likes, auth.user]};\r\n\r\n    dispatch({type: 'UPDATE_POST', payload: newPost});\r\n    socket.emit('likePost', newPost);\r\n\r\n    const msg = {\r\n        id: auth.user._id,\r\n        receivers: auth.user.followers,\r\n        text: 'like your post!',\r\n        url: newPost._id,\r\n        tag: 'LIKE',\r\n        body: '',\r\n        image: newPost.image.length>0 ? newPost.image[0].url : ''\r\n    }\r\n    dispatch(createNotice(auth, msg, socket));\r\n\r\n    try {\r\n        const res = await patchAPI(`post/${post._id}/like`, newPost, auth.token);\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const unlikePost = (auth, post, socket) => async (dispatch) => {\r\n    // logic\r\n    const newLikes = post.likes.filter(like => like._id !== auth.user._id)\r\n    const newPost = {...post, likes: newLikes};\r\n\r\n    dispatch({type: 'UPDATE_POST', payload: newPost});\r\n    socket.emit('unlikePost', newPost);\r\n\r\n    try {\r\n        const res = await patchAPI(`post/${post._id}/unlike`, null, auth.token);\r\n        const msg = {\r\n            id: auth.user._id,\r\n            receivers: [post.user._id],\r\n            url: post._id,\r\n        }\r\n        \r\n        dispatch(deleteNotice(auth, msg))\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}