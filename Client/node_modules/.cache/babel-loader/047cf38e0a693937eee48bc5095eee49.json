{"ast":null,"code":"import _objectSpread from\"D:/Project Web/Project Web/PROJECT 12 (Only MERN)/Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"D:/Project Web/Project Web/PROJECT 12 (Only MERN)/Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import{useDispatch}from'react-redux';import ReactCrop from'react-image-crop';import'react-image-crop/dist/ReactCrop.css';import styles from'./Cropper.module.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Cropper=function Cropper(_ref){var src=_ref.src,setImage=_ref.setImage,setCropImage=_ref.setCropImage;var dispatch=useDispatch();var _useState=useState({aspect:1/1}),_useState2=_slicedToArray(_useState,2),crop=_useState2[0],setCrop=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),image=_useState4[0],setLocalImage=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),link=_useState6[0],setLink=_useState6[1];useEffect(function(){setLink(URL.createObjectURL(src));},[src]);function getCroppedImg(){var canvas=document.createElement(\"canvas\");var scaleX=image.naturalWidth/image.width;var scaleY=image.naturalHeight/image.height;canvas.width=crop.width;canvas.height=crop.height;var ctx=canvas.getContext(\"2d\");// New lines to be added\nvar pixelRatio=window.devicePixelRatio;canvas.width=crop.width*pixelRatio;canvas.height=crop.height*pixelRatio;ctx.setTransform(pixelRatio,0,0,pixelRatio,0,0);ctx.imageSmoothingQuality=\"high\";ctx.drawImage(image,crop.x*scaleX,crop.y*scaleY,crop.width*scaleX,crop.height*scaleY,0,0,crop.width,crop.height);canvas.toBlob(function(blob){if(blob)setImage(_objectSpread(_objectSpread({},image),{},{avatar:blob}));else dispatch({type:'ALERT',payload:{error:'Please crop the image!'}});});setCropImage(null);}return/*#__PURE__*/_jsxs(\"div\",{className:styles.container,children:[/*#__PURE__*/_jsx(\"div\",{className:styles.crop_heading,children:\"Crop Image\"}),/*#__PURE__*/_jsx(ReactCrop,{className:styles.crop_img,crop:crop,src:link,onChange:setCrop,onImageLoaded:setLocalImage}),/*#__PURE__*/_jsx(\"div\",{onClick:getCroppedImg,className:styles.crop_btn,children:\"Crop\"})]});};export default Cropper;","map":{"version":3,"sources":["D:/Project Web/Project Web/PROJECT 12 (Only MERN)/Client/src/components/util/Cropper.js"],"names":["React","useEffect","useState","useDispatch","ReactCrop","styles","Cropper","src","setImage","setCropImage","dispatch","aspect","crop","setCrop","image","setLocalImage","link","setLink","URL","createObjectURL","getCroppedImg","canvas","document","createElement","scaleX","naturalWidth","width","scaleY","naturalHeight","height","ctx","getContext","pixelRatio","window","devicePixelRatio","setTransform","imageSmoothingQuality","drawImage","x","y","toBlob","blob","avatar","type","payload","error","container","crop_heading","crop_img","crop_btn"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\n\r\nimport ReactCrop from 'react-image-crop'\r\n\r\nimport 'react-image-crop/dist/ReactCrop.css'\r\n\r\nimport styles from './Cropper.module.css'\r\n\r\nconst Cropper = ({ src, setImage, setCropImage }) => {\r\n    const dispatch = useDispatch()\r\n    const [crop, setCrop] = useState({aspect: 1/1})\r\n    const [image, setLocalImage] = useState(null)\r\n    const [link, setLink] = useState(null)\r\n    \r\n    useEffect(()=>{\r\n        setLink(URL.createObjectURL(src))\r\n    },[src])\r\n\r\n    function getCroppedImg() {\r\n        const canvas = document.createElement(\"canvas\")\r\n        const scaleX = image.naturalWidth / image.width\r\n        const scaleY = image.naturalHeight / image.height\r\n        canvas.width = crop.width\r\n        canvas.height = crop.height\r\n        const ctx = canvas.getContext(\"2d\")\r\n      \r\n        // New lines to be added\r\n        const pixelRatio = window.devicePixelRatio\r\n        canvas.width = crop.width * pixelRatio\r\n        canvas.height = crop.height * pixelRatio\r\n        ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0)\r\n        ctx.imageSmoothingQuality = \"high\"\r\n      \r\n        ctx.drawImage(\r\n          image,\r\n          crop.x * scaleX,\r\n          crop.y * scaleY,\r\n          crop.width * scaleX,\r\n          crop.height * scaleY,\r\n          0,\r\n          0,\r\n          crop.width,\r\n          crop.height\r\n        )\r\n        canvas.toBlob(\r\n            blob => {\r\n                if(blob) setImage({...image,avatar: blob})\r\n                else dispatch({type: 'ALERT' , payload: {error: 'Please crop the image!'}})\r\n            }\r\n        )\r\n        setCropImage(null)\r\n    }\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.crop_heading}>Crop Image</div>\r\n            <ReactCrop className={styles.crop_img} crop={crop} src={link} onChange={setCrop} onImageLoaded={setLocalImage} />\r\n            <div onClick={getCroppedImg} className={styles.crop_btn}>Crop</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cropper\r\n"]},"metadata":{},"sourceType":"module"}