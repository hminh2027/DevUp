{"ast":null,"code":"import { deleteAPI, patchAPI, postAPI } from \"../../apis/Axios\";\nimport { createNotice, deleteNotice } from './noticeAction';\nexport const createComment = (auth, newComment, post, posts, socket) => async dispatch => {\n  try {\n    const data = { ...newComment,\n      postId: post._id,\n      postUserId: post.user._id\n    };\n    const res = await postAPI('comment', data, auth.token); // logic\n\n    const newData = { ...res.data.newComment,\n      user: auth.user\n    };\n    const newPost = { ...post,\n      comments: [...post.comments, newData]\n    };\n    let newPosts = posts.map(p => p._id === post._id ? newPost : p);\n    dispatch({\n      type: 'UPDATE_POSTS',\n      payload: newPosts\n    });\n    dispatch({\n      type: 'UPDATE_POST',\n      payload: newPost\n    });\n    socket.emit('commentPost', newPost, newPosts);\n    const msg = {\n      id: res.data.newComment._id,\n      receivers: newComment.reply ? [newComment.tag] : auth.user.followers,\n      text: newComment.reply ? 'reply your comment' : 'comment to your post',\n      url: newPost._id,\n      tag: 'COMMENT',\n      body: '',\n      image: newPost.image.length > 0 ? newPost.image[0].url : ''\n    };\n    dispatch(createNotice(auth, msg, socket));\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const deleteComment = (auth, comment, post, posts, socket) => async dispatch => {\n  try {\n    // delete the main and reply comments\n    const deleteArr = [...post.comments.filter(cmt => cmt.reply === comment._id), comment]; // logic\n\n    const newPost = { ...post,\n      comments: post.comments.filter(cmt => !deleteArr.find(deletedCmt => cmt._id === deletedCmt._id))\n    };\n    let newPosts = posts.map(p => p._id === post._id ? newPost : p);\n    dispatch({\n      type: 'UPDATE_POSTS',\n      payload: newPosts\n    });\n    dispatch({\n      type: 'UPDATE_POST',\n      payload: newPost\n    });\n    socket.emit('uncommentPost', newPost, newPosts);\n    deleteArr.forEach(async item => {\n      await deleteAPI(`comment/${item._id}`, auth.token);\n      const msg = {\n        id: item._id,\n        receivers: comment.reply ? [comment.tag._id] : [post.user._id],\n        url: post._id\n      };\n      dispatch(deleteNotice(auth, msg));\n    });\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const updateComment = (auth, body, post, posts, comment) => dispatch => {\n  const newComment = { ...comment,\n    body: body\n  };\n  const newComments = post.comments.map(cmt => cmt._id === comment._id ? newComment : cmt);\n  const newPost = { ...post,\n    comments: newComments\n  };\n  let newPosts = posts.map(p => p._id === post._id ? newPost : p);\n  dispatch({\n    type: 'UPDATE_POSTS',\n    payload: newPosts\n  });\n  dispatch({\n    type: 'UPDATE_POST',\n    payload: newPost\n  });\n\n  try {\n    const res = patchAPI(`comment/${comment._id}`, {\n      body\n    }, auth.token);\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["D:/Project Web/Project Web/PROJECT 12 (Only MERN)/Client/client/src/store/actions/commentAction.js"],"names":["deleteAPI","patchAPI","postAPI","createNotice","deleteNotice","createComment","auth","newComment","post","posts","socket","dispatch","data","postId","_id","postUserId","user","res","token","newData","newPost","comments","newPosts","map","p","type","payload","emit","msg","id","receivers","reply","tag","followers","text","url","body","image","length","err","error","response","deleteComment","comment","deleteArr","filter","cmt","find","deletedCmt","forEach","item","updateComment","newComments"],"mappings":"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","sourcesContent":["import { deleteAPI, patchAPI, postAPI } from \"../../apis/Axios\";\r\nimport {createNotice, deleteNotice} from './noticeAction'\r\n\r\nexport const createComment = (auth, newComment, post, posts, socket) => async (dispatch) => {\r\n    try {\r\n        const data = {...newComment, postId: post._id, postUserId: post.user._id}\r\n        const res = await postAPI('comment', data, auth.token);\r\n        // logic\r\n        const newData = {...res.data.newComment, user: auth.user};\r\n        const newPost = {...post, comments: [...post.comments, newData]};\r\n\r\n        let newPosts = posts.map(p=>p._id===post._id?newPost:p);\r\n\r\n        dispatch({type: 'UPDATE_POSTS', payload: newPosts});\r\n        dispatch({type: 'UPDATE_POST', payload: newPost});\r\n\r\n        socket.emit('commentPost', newPost, newPosts);\r\n\r\n        const msg = {\r\n            id: res.data.newComment._id,\r\n            receivers: newComment.reply ? [newComment.tag] : auth.user.followers,\r\n            text: newComment.reply ? 'reply your comment' : 'comment to your post',\r\n            url: newPost._id,\r\n            tag: 'COMMENT',\r\n            body: '',\r\n            image: newPost.image.length>0 ? newPost.image[0].url : ''\r\n        }\r\n\r\n        dispatch(createNotice(auth, msg, socket));\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}});\r\n    }\r\n}\r\n\r\nexport const deleteComment = (auth, comment, post, posts, socket) => async (dispatch) => {\r\n    try {\r\n        // delete the main and reply comments\r\n        const deleteArr = [...post.comments.filter(cmt=>cmt.reply===comment._id), comment];\r\n        // logic\r\n        const newPost = {\r\n            ...post, \r\n            comments: post.comments.filter(cmt=>!deleteArr.find(deletedCmt=>cmt._id===deletedCmt._id))\r\n        };\r\n\r\n        let newPosts = posts.map(p=>p._id===post._id?newPost:p);\r\n\r\n        dispatch({type: 'UPDATE_POSTS', payload: newPosts});\r\n        dispatch({type: 'UPDATE_POST', payload: newPost});\r\n\r\n        socket.emit('uncommentPost', newPost, newPosts);\r\n\r\n        deleteArr.forEach(async item=>{\r\n            await deleteAPI(`comment/${item._id}`, auth.token);\r\n\r\n            const msg = {\r\n                id: item._id,\r\n                receivers: comment.reply ? [comment.tag._id] : [post.user._id],\r\n                url: post._id\r\n            }\r\n            dispatch(deleteNotice(auth, msg))\r\n        })\r\n\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}});\r\n    }\r\n}\r\n\r\nexport const updateComment = (auth, body, post, posts, comment) => (dispatch) => {\r\n    const newComment = {...comment, body: body};\r\n    const newComments = post.comments.map(cmt=>cmt._id===comment._id?newComment:cmt);\r\n\r\n    const newPost = {...post, comments: newComments};\r\n    \r\n    let newPosts=posts.map(p=>p._id===post._id?newPost:p);\r\n    \r\n    dispatch({type: 'UPDATE_POSTS', payload: newPosts});\r\n    dispatch({type: 'UPDATE_POST', payload: newPost});\r\n\r\n    try {\r\n        const res = patchAPI(`comment/${comment._id}`, {body}, auth.token);\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}});\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}