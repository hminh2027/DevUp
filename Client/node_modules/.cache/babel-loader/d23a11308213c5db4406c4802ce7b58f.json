{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.registerGlobalHelper(\"fold\", \"comment\", function (mode) {\n    return mode.blockCommentStart && mode.blockCommentEnd;\n  }, function (cm, start) {\n    var mode = cm.getModeAt(start),\n        startToken = mode.blockCommentStart,\n        endToken = mode.blockCommentEnd;\n    if (!startToken || !endToken) return;\n    var line = start.line,\n        lineText = cm.getLine(line);\n    var startCh;\n\n    for (var at = start.ch, pass = 0;;) {\n      var found = at <= 0 ? -1 : lineText.lastIndexOf(startToken, at - 1);\n\n      if (found == -1) {\n        if (pass == 1) return;\n        pass = 1;\n        at = lineText.length;\n        continue;\n      }\n\n      if (pass == 1 && found < start.ch) return;\n\n      if (/comment/.test(cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1))) && (found == 0 || lineText.slice(found - endToken.length, found) == endToken || !/comment/.test(cm.getTokenTypeAt(CodeMirror.Pos(line, found))))) {\n        startCh = found + startToken.length;\n        break;\n      }\n\n      at = found - 1;\n    }\n\n    var depth = 1,\n        lastLine = cm.lastLine(),\n        end,\n        endCh;\n\n    outer: for (var i = line; i <= lastLine; ++i) {\n      var text = cm.getLine(i),\n          pos = i == line ? startCh : 0;\n\n      for (;;) {\n        var nextOpen = text.indexOf(startToken, pos),\n            nextClose = text.indexOf(endToken, pos);\n        if (nextOpen < 0) nextOpen = text.length;\n        if (nextClose < 0) nextClose = text.length;\n        pos = Math.min(nextOpen, nextClose);\n        if (pos == text.length) break;\n        if (pos == nextOpen) ++depth;else if (! --depth) {\n          end = i;\n          endCh = pos;\n          break outer;\n        }\n        ++pos;\n      }\n    }\n\n    if (end == null || line == end && endCh == startCh) return;\n    return {\n      from: CodeMirror.Pos(line, startCh),\n      to: CodeMirror.Pos(end, endCh)\n    };\n  });\n});","map":{"version":3,"sources":["D:/Project Web/Project Web/PROJECT 12 (Only MERN)/Client/client/node_modules/codemirror/addon/fold/comment-fold.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","registerGlobalHelper","mode","blockCommentStart","blockCommentEnd","cm","start","getModeAt","startToken","endToken","line","lineText","getLine","startCh","at","ch","pass","found","lastIndexOf","length","test","getTokenTypeAt","Pos","slice","depth","lastLine","end","endCh","outer","i","text","pos","nextOpen","indexOf","nextClose","Math","min","from","to"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerGlobalHelper(\"fold\", \"comment\", function(mode) {\n  return mode.blockCommentStart && mode.blockCommentEnd;\n}, function(cm, start) {\n  var mode = cm.getModeAt(start), startToken = mode.blockCommentStart, endToken = mode.blockCommentEnd;\n  if (!startToken || !endToken) return;\n  var line = start.line, lineText = cm.getLine(line);\n\n  var startCh;\n  for (var at = start.ch, pass = 0;;) {\n    var found = at <= 0 ? -1 : lineText.lastIndexOf(startToken, at - 1);\n    if (found == -1) {\n      if (pass == 1) return;\n      pass = 1;\n      at = lineText.length;\n      continue;\n    }\n    if (pass == 1 && found < start.ch) return;\n    if (/comment/.test(cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1))) &&\n        (found == 0 || lineText.slice(found - endToken.length, found) == endToken ||\n         !/comment/.test(cm.getTokenTypeAt(CodeMirror.Pos(line, found))))) {\n      startCh = found + startToken.length;\n      break;\n    }\n    at = found - 1;\n  }\n\n  var depth = 1, lastLine = cm.lastLine(), end, endCh;\n  outer: for (var i = line; i <= lastLine; ++i) {\n    var text = cm.getLine(i), pos = i == line ? startCh : 0;\n    for (;;) {\n      var nextOpen = text.indexOf(startToken, pos), nextClose = text.indexOf(endToken, pos);\n      if (nextOpen < 0) nextOpen = text.length;\n      if (nextClose < 0) nextClose = text.length;\n      pos = Math.min(nextOpen, nextClose);\n      if (pos == text.length) break;\n      if (pos == nextOpen) ++depth;\n      else if (!--depth) { end = i; endCh = pos; break outer; }\n      ++pos;\n    }\n  }\n  if (end == null || line == end && endCh == startCh) return;\n  return {from: CodeMirror.Pos(line, startCh),\n          to: CodeMirror.Pos(end, endCh)};\n});\n\n});\n"]},"metadata":{},"sourceType":"script"}