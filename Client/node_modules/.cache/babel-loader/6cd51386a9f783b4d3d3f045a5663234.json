{"ast":null,"code":"import { deleteAPI, getAPI, patchAPI, postAPI } from '../../apis/Axios';\nimport { upload } from '../../apis/Cloudinary';\nimport { createNotice, deleteNotice, deletePostNotices } from './noticeAction';\nexport const createPost = (data, auth, socket) => async dispatch => {\n  let media = [];\n\n  try {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        loading: true\n      }\n    });\n    dispatch({\n      type: 'MODAL',\n      payload: true\n    });\n    if (data.files.length > 0) media = await upload(data.files);\n    const res = await postAPI('post', {\n      body: data.text,\n      media: media\n    }, auth.token);\n    const newPost = { ...res.data.newPost,\n      user: auth.user\n    };\n    console.log(newPost);\n    dispatch({\n      type: 'CREATE_POST',\n      payload: newPost\n    });\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        success: res.data.msg\n      }\n    });\n    let msg = {\n      id: res.data.newPost._id,\n      receivers: newPost.user.followers,\n      url: res.data.newPost._id,\n      type: 'post',\n      body: data.body\n    };\n    msg = { ...msg,\n      text: `${media.length > 0 ? media[0].url.match(/video/i) ? 'add new video' : 'add new image' : 'post a status'}`,\n      tag: `${media.length > 0 ? media[0].url.match(/video/i) ? 'VIDEO' : 'IMAGE' : 'POST'}`\n    };\n    dispatch(createNotice(auth, msg, socket));\n  } catch (err) {\n    dispatch({\n      type: 'MODAL',\n      payload: false\n    });\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getPosts = auth => async dispatch => {\n  try {\n    dispatch({\n      type: 'LOADING_POST',\n      payload: true\n    });\n    const res = await getAPI('post', auth.token);\n    if (res.data.result.length > 0) dispatch({\n      type: 'GET_POSTS',\n      payload: res.data.result\n    });\n    dispatch({\n      type: 'LOADING_POST',\n      payload: false\n    });\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getPost = (auth, id) => async dispatch => {\n  try {\n    dispatch({\n      type: 'LOADING_POST',\n      payload: true\n    });\n    const res = await getAPI(`post/${id}`, auth.token);\n    dispatch({\n      type: 'GET_POST',\n      payload: res.data.post\n    });\n    dispatch({\n      type: 'LOADING_POST',\n      payload: false\n    });\n  } catch (err) {\n    dispatch({\n      type: 'GET_POST',\n      payload: err.response.data.post\n    });\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const updatePost = (content, auth, id) => async dispatch => {\n  try {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        loading: true\n      }\n    });\n    dispatch({\n      type: 'MODAL',\n      payload: true\n    });\n    const res = await patchAPI(`post/${id}`, {\n      body: content\n    }, auth.token); // logic\n\n    dispatch({\n      type: 'UPDATE_POST',\n      payload: res.data.newPost\n    });\n    dispatch({\n      type: 'GET_POST',\n      payload: res.data.newPost\n    });\n    dispatch({\n      type: 'MODAL',\n      payload: false\n    });\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: 'MODAL',\n      payload: false\n    });\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const deletePost = (auth, id) => async dispatch => {\n  try {\n    const res = await deleteAPI(`post/${id}`, auth.token);\n    dispatch({\n      type: 'DELETE_POST',\n      payload: res.data.post\n    });\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        success: res.data.msg\n      }\n    });\n    dispatch(deletePostNotices(auth, id));\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const likePost = (auth, post, socket) => async dispatch => {\n  if (auth.user._id === post.user._id) return dispatch({\n    type: 'ALERT',\n    payload: {\n      warn: 'Dont like your own post! '\n    }\n  });\n  const newPost = { ...post,\n    likes: [...post.likes, auth.user]\n  };\n\n  try {\n    await patchAPI(`post/${post._id}/like`, newPost, auth.token);\n    dispatch({\n      type: 'UPDATE_POST',\n      payload: newPost\n    });\n    socket.emit('likePost', newPost);\n    const msg = {\n      id: auth.user._id,\n      receivers: auth.user.followers,\n      text: 'like your post!',\n      type: 'post',\n      url: newPost._id,\n      tag: 'LIKE',\n      body: ''\n    };\n    dispatch(createNotice(auth, msg, socket));\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const unlikePost = (auth, post, socket) => async dispatch => {\n  try {\n    await patchAPI(`post/${post._id}/unlike`, null, auth.token);\n    const newLikes = post.likes.filter(like => like._id !== auth.user._id);\n    const newPost = { ...post,\n      likes: newLikes\n    };\n    dispatch({\n      type: 'UPDATE_POST',\n      payload: newPost\n    });\n    socket.emit('unlikePost', newPost);\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const sharePost = (auth, post, body, socket) => async dispatch => {\n  try {\n    const res = await postAPI(`post/${post._id}/share`, {\n      post,\n      body\n    }, auth.token);\n    const newPost = { ...res.data.newPost,\n      user: auth.user\n    };\n    console.log(newPost);\n    dispatch({\n      type: 'CREATE_POST',\n      payload: newPost\n    });\n    console.log('wtf');\n    let msg = {\n      id: newPost._id,\n      receivers: newPost.user.followers,\n      url: newPost._id,\n      body: body,\n      type: 'post',\n      text: 'share a post',\n      tag: 'POST'\n    };\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        success: res.data.msg\n      }\n    });\n    dispatch(createNotice(auth, msg, socket));\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const savePost = (auth, id) => async dispatch => {\n  try {\n    const res = await patchAPI(`post/${id}/save`, null, auth.token);\n    dispatch({\n      type: 'AUTH',\n      payload: { ...auth,\n        user: res.data.newUser\n      }\n    });\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const unsavePost = (auth, id) => async dispatch => {\n  try {\n    const res = await patchAPI(`post/${id}/unsave`, null, auth.token);\n    dispatch({\n      type: 'AUTH',\n      payload: { ...auth,\n        user: res.data.newUser\n      }\n    });\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["D:/Project Web/Project Web/PROJECT 12 (Only MERN)/Client/client/src/store/actions/postAction.js"],"names":["deleteAPI","getAPI","patchAPI","postAPI","upload","createNotice","deleteNotice","deletePostNotices","createPost","data","auth","socket","dispatch","media","type","payload","loading","files","length","res","body","text","token","newPost","user","console","log","success","msg","id","_id","receivers","followers","url","match","tag","err","error","response","getPosts","result","getPost","post","updatePost","content","deletePost","likePost","warn","likes","emit","unlikePost","newLikes","filter","like","sharePost","savePost","newUser","unsavePost"],"mappings":"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","sourcesContent":["import {deleteAPI, getAPI, patchAPI, postAPI} from '../../apis/Axios'\r\nimport {upload} from '../../apis/Cloudinary'\r\nimport {createNotice, deleteNotice, deletePostNotices} from './noticeAction'\r\n\r\nexport const createPost = (data, auth, socket) => async (dispatch) => {\r\n    let media = []\r\n    try {\r\n        dispatch({type: 'ALERT', payload: {loading: true}})\r\n        dispatch({type: 'MODAL' , payload: true})\r\n        if(data.files.length > 0) media = await upload(data.files)\r\n\r\n        const res = await postAPI('post', {body: data.text, media: media}, auth.token)\r\n        const newPost = {...res.data.newPost, user: auth.user}\r\n\r\n        console.log(newPost)\r\n        dispatch({type:'CREATE_POST', payload: newPost})\r\n        dispatch({type: 'ALERT', payload: {success: res.data.msg}})\r\n\r\n        let msg = {\r\n            id: res.data.newPost._id,\r\n            receivers: newPost.user.followers,\r\n            url: res.data.newPost._id,\r\n            type: 'post',\r\n            body: data.body\r\n        }\r\n        msg = {...msg, \r\n            text: `${media.length > 0 ? (media[0].url.match(/video/i) ? 'add new video' : 'add new image') : 'post a status'}`,\r\n            tag: `${media.length > 0 ? (media[0].url.match(/video/i) ? 'VIDEO' : 'IMAGE') : 'POST'}`,\r\n        }\r\n\r\n        dispatch(createNotice(auth, msg, socket))\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'MODAL' , payload: false})\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const getPosts = (auth) => async (dispatch) => {\r\n    try {\r\n        dispatch({type: 'LOADING_POST', payload: true})\r\n        const res = await getAPI('post', auth.token)\r\n\r\n        if(res.data.result.length>0) dispatch({type: 'GET_POSTS', payload: res.data.result})       \r\n        dispatch({type: 'LOADING_POST', payload: false})\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const getPost = (auth, id) => async (dispatch) => {\r\n    try {\r\n        dispatch({type: 'LOADING_POST', payload: true})\r\n        const res = await getAPI(`post/${id}`, auth.token)\r\n        dispatch({type: 'GET_POST', payload: res.data.post})\r\n        dispatch({type: 'LOADING_POST', payload: false})\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'GET_POST', payload: err.response.data.post})\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const updatePost = (content, auth, id) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: 'ALERT', payload: {loading: true} })\r\n        dispatch({type: 'MODAL' , payload: true})\r\n\r\n        const res = await patchAPI(`post/${id}`, {body: content}, auth.token)\r\n\r\n        // logic\r\n        dispatch({type: 'UPDATE_POST', payload: res.data.newPost})\r\n        dispatch({type: 'GET_POST', payload: res.data.newPost})\r\n        \r\n        dispatch({ type: 'MODAL' , payload: false})\r\n        dispatch({ type: 'ALERT', payload: {success: res.data.msg} })\r\n\r\n    } catch(err) {\r\n        dispatch({ type: 'MODAL' , payload: false})\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const deletePost = (auth, id) => async (dispatch) => {\r\n    try {\r\n        const res = await deleteAPI(`post/${id}`, auth.token)\r\n        dispatch({type: 'DELETE_POST', payload: res.data.post})\r\n        dispatch({ type: 'ALERT', payload: {success: res.data.msg}})\r\n\r\n        dispatch(deletePostNotices(auth, id))\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const likePost = (auth, post, socket) => async (dispatch) => {\r\n    if(auth.user._id === post.user._id) return dispatch({type: 'ALERT', payload: {warn: 'Dont like your own post! '}})\r\n    const newPost = {...post, likes: [...post.likes, auth.user]}\r\n\r\n    try {\r\n        await patchAPI(`post/${post._id}/like`, newPost, auth.token)\r\n\r\n        dispatch({type: 'UPDATE_POST', payload: newPost})\r\n\r\n        socket.emit('likePost', newPost)\r\n    \r\n        const msg = {\r\n            id: auth.user._id,\r\n            receivers: auth.user.followers,\r\n            text: 'like your post!',\r\n            type: 'post',\r\n            url: newPost._id,\r\n            tag: 'LIKE',\r\n            body: ''\r\n        }\r\n\r\n        dispatch(createNotice(auth, msg, socket))\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const unlikePost = (auth, post, socket) => async (dispatch) => {\r\n    try {\r\n        await patchAPI(`post/${post._id}/unlike`, null, auth.token)\r\n        \r\n        const newLikes = post.likes.filter(like => like._id !== auth.user._id)\r\n        const newPost = {...post, likes: newLikes}\r\n\r\n        dispatch({type: 'UPDATE_POST', payload: newPost})\r\n        socket.emit('unlikePost', newPost)\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const sharePost = (auth, post, body, socket) => async (dispatch) => {\r\n    try {\r\n        const res = await postAPI(`post/${post._id}/share`, {post, body}, auth.token)\r\n        const newPost = {...res.data.newPost, user: auth.user}\r\n\r\n        console.log(newPost)\r\n\r\n        dispatch({type:'CREATE_POST', payload: newPost})\r\n\r\n        console.log('wtf')\r\n\r\n        let msg = {\r\n            id: newPost._id,\r\n            receivers: newPost.user.followers,\r\n            url: newPost._id,\r\n            body: body,\r\n            type: 'post',\r\n            text: 'share a post',\r\n            tag: 'POST'\r\n        }\r\n\r\n        dispatch({ type: 'ALERT', payload: {success: res.data.msg} })\r\n\r\n        dispatch(createNotice(auth, msg, socket))\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const savePost = (auth, id) => async (dispatch) => {\r\n    try {\r\n        const res = await patchAPI(`post/${id}/save`, null, auth.token)\r\n\r\n        dispatch({\r\n            type: 'AUTH',\r\n            payload: {\r\n                ...auth,\r\n                user: res.data.newUser\r\n            }\r\n        })\r\n\r\n        dispatch({ type: 'ALERT', payload: {success: res.data.msg}})\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const unsavePost = (auth, id) => async (dispatch) => {\r\n    try {\r\n        const res = await patchAPI(`post/${id}/unsave`, null, auth.token)\r\n\r\n        dispatch({\r\n            type: 'AUTH',\r\n            payload: {\r\n                ...auth,\r\n                user: res.data.newUser\r\n            }\r\n        })\r\n        \r\n        dispatch({ type: 'ALERT', payload: {success: res.data.msg} })\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}