{"ast":null,"code":"import { deleteAPI, patchAPI, postAPI } from \"../../apis/Axios\";\nexport const createComment = (auth, newComment, post, posts) => async dispatch => {\n  try {\n    const data = { ...newComment,\n      postId: post._id,\n      postUserId: post.user._id\n    };\n    const res = await postAPI('comment', data, auth.token); // logic\n\n    const newData = { ...res.data.newComment,\n      user: auth.user\n    };\n    const newPost = { ...post,\n      comments: [...post.comments, newData]\n    };\n    let newPosts = posts.map(p => p._id === post._id ? newPost : p);\n    dispatch({\n      type: 'UPDATE_POST',\n      payload: newPosts\n    });\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const deleteComment = (auth, comment, post, posts) => async dispatch => {\n  try {\n    // delete the main and reply comments\n    const deleteArr = [...post.comments.filter(cmt => cmt.reply === comment._id), comment]; // logic\n\n    const newPost = { ...post,\n      comments: post.comments.filter(cmt => !deleteArr.find(deletedCmt => cmt._id === deletedCmt._id))\n    };\n    let newPosts = posts.map(p => p._id === post._id ? newPost : p);\n    dispatch({\n      type: 'UPDATE_POST',\n      payload: newPosts\n    });\n    deleteArr.forEach(item => {\n      deleteAPI(`comment/${item._id}`, auth.token);\n    });\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const updateComment = (auth, body, post, posts, comment) => dispatch => {\n  const newComment = { ...comment,\n    body: body\n  };\n  const newComments = post.comments.map(cmt => cmt._id === comment._id ? newComment : cmt);\n  const newPost = { ...post,\n    comments: newComments\n  };\n  let newPosts = posts.map(p => p._id === post._id ? newPost : p);\n  dispatch({\n    type: 'UPDATE_POST',\n    payload: newPosts\n  });\n\n  try {\n    const res = patchAPI(`comment/${comment._id}`, {\n      body\n    }, auth.token);\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["D:/Project Web/PROJECT 12 (Only MERN)/Client/client/src/store/actions/commentAction.js"],"names":["deleteAPI","patchAPI","postAPI","createComment","auth","newComment","post","posts","dispatch","data","postId","_id","postUserId","user","res","token","newData","newPost","comments","newPosts","map","p","type","payload","err","error","response","msg","deleteComment","comment","deleteArr","filter","cmt","reply","find","deletedCmt","forEach","item","updateComment","body","newComments"],"mappings":"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","sourcesContent":["import { deleteAPI, patchAPI, postAPI } from \"../../apis/Axios\";\r\n\r\nexport const createComment = (auth, newComment, post, posts) => async (dispatch) => {\r\n    try {\r\n        const data = {...newComment, postId: post._id, postUserId: post.user._id}\r\n        const res = await postAPI('comment', data, auth.token);\r\n\r\n        // logic\r\n        const newData = {...res.data.newComment, user: auth.user};\r\n        const newPost = {...post, comments: [...post.comments, newData]};\r\n\r\n        let newPosts = posts.map(p=>p._id===post._id?newPost:p);\r\n\r\n        dispatch({type: 'UPDATE_POST', payload: newPosts});\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}});\r\n    }\r\n}\r\n\r\nexport const deleteComment = (auth, comment, post, posts) => async (dispatch) => {\r\n    try {\r\n        // delete the main and reply comments\r\n        const deleteArr = [...post.comments.filter(cmt=>cmt.reply===comment._id), comment];\r\n        // logic\r\n        const newPost = {...post, comments: post.comments.filter(cmt=>!deleteArr.find(deletedCmt=>cmt._id===deletedCmt._id))};\r\n\r\n        let newPosts = posts.map(p=>p._id===post._id?newPost:p);\r\n\r\n        dispatch({type: 'UPDATE_POST', payload: newPosts});\r\n\r\n        deleteArr.forEach(item=>{\r\n            deleteAPI(`comment/${item._id}`, auth.token);\r\n        })\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}});\r\n    }\r\n}\r\n\r\nexport const updateComment = (auth, body, post, posts, comment) => (dispatch) => {\r\n    const newComment = {...comment, body: body};\r\n    const newComments = post.comments.map(cmt=>cmt._id===comment._id?newComment:cmt);\r\n\r\n    const newPost = {...post, comments: newComments};\r\n    \r\n    let newPosts=posts.map(p=>p._id===post._id?newPost:p);\r\n    \r\n    dispatch({type: 'UPDATE_POST', payload: newPosts});\r\n    try {\r\n        const res = patchAPI(`comment/${comment._id}`, {body}, auth.token);\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}});\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}