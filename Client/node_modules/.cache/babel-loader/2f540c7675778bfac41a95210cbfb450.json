{"ast":null,"code":"import { deleteAPI, getAPI, patchAPI, postAPI } from '../../apis/Axios';\nimport { imageUpload } from '../../apis/Cloudinary';\nexport const createPost = (data, auth) => async dispatch => {\n  let media = [];\n\n  try {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        loading: true\n      }\n    });\n    dispatch({\n      type: 'MODAL',\n      payload: true\n    });\n    if (data.image.length > 0) media = await imageUpload(data.image);\n    const res = await postAPI('post', {\n      body: data.body,\n      image: media\n    }, auth.token); // dispatch({type:'CREATE_POST'});\n\n    dispatch({\n      type: 'MODAL',\n      payload: false\n    });\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: 'MODAL',\n      payload: false\n    });\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getPosts = auth => async dispatch => {\n  try {\n    const res = await getAPI('post', auth.token);\n    dispatch({\n      type: 'GET_POSTS',\n      payload: res.data.posts\n    });\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const updatePost = (content, auth, id, profile) => async dispatch => {\n  try {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        loading: true\n      }\n    });\n    dispatch({\n      type: 'MODAL',\n      payload: true\n    });\n    const res = await patchAPI(`post/${id}`, {\n      body: content\n    }, auth.token); // logic\n\n    let newPosts = [];\n\n    for (let i = 0; i < profile.posts.length; i++) {\n      if (profile.posts[i]._id === id) newPosts.push(res.data.newPost);else newPosts.push(profile.posts[i]);\n    }\n\n    dispatch({\n      type: 'GET_USER_POSTS',\n      payload: newPosts\n    });\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        success: res.data.msg\n      }\n    });\n    dispatch({\n      type: 'MODAL',\n      payload: false\n    });\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const deletePost = (auth, id, profile) => async dispatch => {\n  const newPosts = profile.posts.filter(post => post._id !== id);\n  dispatch({\n    type: 'UPDATE_USER_POST',\n    payload: newPosts\n  });\n\n  try {\n    const res = await deleteAPI(`post/${id}`, auth.token);\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const likePost = (auth, post, profile, posts) => async dispatch => {\n  let tempPost = [];\n  if (profile.posts.length > 0) tempPost = profile;else tempPost = posts.posts; // logic\n\n  const newPost = { ...post,\n    likes: [...post.likes, auth.user]\n  };\n  let newPosts = [];\n\n  for (let i = 0; i < tempPost.length; i++) {\n    if (tempPost[i]._id === post._id) newPosts.push(newPost);else newPosts.push(tempPost[i]);\n  }\n\n  dispatch({\n    type: 'UPDATE_USER_POST',\n    payload: newPosts\n  });\n  dispatch({\n    type: 'UPDATE_POST',\n    payload: newPosts\n  });\n\n  try {\n    const res = await patchAPI(`post/${post._id}/like`, null, auth.token);\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const unlikePost = (auth, post, profile, posts) => async dispatch => {\n  let tempPost = [];\n  if (profile.posts.length > 0) tempPost = profile;else tempPost = posts.posts; // logic\n\n  const newLikes = post.likes.filter(like => like._id !== auth.user._id);\n  const newPost = { ...post,\n    likes: newLikes\n  };\n  let newPosts = [];\n\n  for (let i = 0; i < tempPost.length; i++) {\n    if (tempPost[i]._id === post._id) newPosts.push(newPost);else newPosts.push(tempPost[i]);\n  }\n\n  console.log(newPosts);\n  dispatch({\n    type: 'UPDATE_USER_POST',\n    payload: newPosts\n  });\n  dispatch({\n    type: 'UPDATE_POST',\n    payload: newPosts\n  });\n\n  try {\n    const res = await patchAPI(`post/${post._id}/unlike`, null, auth.token);\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["D:/Project Web/PROJECT 12 (Only MERN)/Client/client/src/store/actions/postAction.js"],"names":["deleteAPI","getAPI","patchAPI","postAPI","imageUpload","createPost","data","auth","dispatch","media","type","payload","loading","image","length","res","body","token","success","msg","err","error","response","getPosts","posts","updatePost","content","id","profile","newPosts","i","_id","push","newPost","deletePost","filter","post","likePost","tempPost","likes","user","unlikePost","newLikes","like","console","log"],"mappings":"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","sourcesContent":["import {deleteAPI, getAPI, patchAPI, postAPI} from '../../apis/Axios';\r\nimport {imageUpload} from '../../apis/Cloudinary';\r\n\r\nexport const createPost = (data,auth) => async (dispatch) => {\r\n    let media = [];\r\n    try {\r\n        dispatch({type: 'ALERT', payload: {loading: true}});\r\n        dispatch({type: 'MODAL' , payload: true});\r\n        if(data.image.length > 0) media = await imageUpload(data.image);\r\n\r\n        const res = await postAPI('post', {body: data.body,image: media}, auth.token);\r\n        // dispatch({type:'CREATE_POST'});\r\n        dispatch({type: 'MODAL' , payload: false});\r\n        dispatch({type: 'ALERT', payload: {success: res.data.msg}});\r\n\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'MODAL' , payload: false});\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const getPosts = (auth) => async (dispatch) => {\r\n    try {\r\n        const res = await getAPI('post', auth.token);\r\n        dispatch({type: 'GET_POSTS', payload: res.data.posts})\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const updatePost = (content, auth, id, profile) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: 'ALERT', payload: {loading: true} });\r\n        dispatch({type: 'MODAL' , payload: true});\r\n\r\n        const res = await patchAPI(`post/${id}`, {body: content}, auth.token);\r\n\r\n        // logic\r\n        let newPosts = [];\r\n        for (let i = 0; i< profile.posts.length; i++) {\r\n            if(profile.posts[i]._id === id) newPosts.push(res.data.newPost);\r\n            else newPosts.push(profile.posts[i]);\r\n        }  \r\n\r\n        dispatch({ type: 'GET_USER_POSTS', payload: newPosts});\r\n        dispatch({ type: 'ALERT', payload: {success: res.data.msg} });\r\n        dispatch({ type: 'MODAL' , payload: false});\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const deletePost = (auth, id, profile) => async (dispatch) => {\r\n    const newPosts = profile.posts.filter(post => post._id !== id);\r\n    dispatch({type: 'UPDATE_USER_POST', payload: newPosts});\r\n\r\n    try {\r\n        const res = await deleteAPI(`post/${id}`, auth.token);\r\n        dispatch({ type: 'ALERT', payload: {success: res.data.msg} });\r\n\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const likePost = (auth, post, profile, posts) => async (dispatch) => {\r\n    let tempPost = [];\r\n    if(profile.posts.length>0) tempPost=profile;\r\n    else tempPost=posts.posts;\r\n\r\n    // logic\r\n    const newPost = {...post, likes: [...post.likes, auth.user]};\r\n    let newPosts = [];\r\n\r\n    for (let i = 0; i<tempPost.length; i++) {\r\n        if(tempPost[i]._id === post._id) newPosts.push(newPost);\r\n        else newPosts.push(tempPost[i]);\r\n    }\r\n\r\n    dispatch({type: 'UPDATE_USER_POST', payload: newPosts});\r\n    dispatch({type: 'UPDATE_POST', payload: newPosts});\r\n\r\n    try {\r\n        const res = await patchAPI(`post/${post._id}/like`, null, auth.token);\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const unlikePost = (auth, post, profile, posts) => async (dispatch) => {\r\n    let tempPost = [];\r\n    if(profile.posts.length>0) tempPost=profile;\r\n    else tempPost=posts.posts;\r\n\r\n    // logic\r\n    const newLikes = post.likes.filter(like => like._id !== auth.user._id)\r\n    const newPost = {...post, likes: newLikes};\r\n    let newPosts = [];\r\n\r\n    for (let i = 0; i<tempPost.length; i++) {\r\n        if(tempPost[i]._id === post._id) newPosts.push(newPost);\r\n        else newPosts.push(tempPost[i]);\r\n    }\r\n\r\n    console.log(newPosts);\r\n\r\n    dispatch({type: 'UPDATE_USER_POST', payload: newPosts});\r\n    dispatch({type: 'UPDATE_POST', payload: newPosts});\r\n\r\n    try {\r\n        const res = await patchAPI(`post/${post._id}/unlike`, null, auth.token);\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}