{"ast":null,"code":"import { deleteAPI, patchAPI, postAPI } from \"../../apis/Axios\";\nexport const createComment = (auth, newComment, post, posts) => async dispatch => {\n  try {\n    const data = { ...newComment,\n      postId: post._id,\n      postUserId: post.user._id\n    };\n    const res = await postAPI('comment', data, auth.token); // logic\n\n    const newData = { ...res.data.newComment,\n      user: auth.user\n    };\n    const newPost = { ...post,\n      comments: [...post.comments, newData]\n    };\n    let newPosts = [];\n\n    for (let i = 0; i < posts.length; i++) {\n      if (posts[i]._id === post._id) newPosts.push(newPost);else newPosts.push(posts[i]);\n    }\n\n    dispatch({\n      type: 'UPDATE_POST',\n      payload: newPosts\n    });\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const deleteComment = (auth, comment, post, posts) => async dispatch => {\n  try {\n    // delete the main and reply comments\n    const deleteArr = [...post.comments.filter(cmt => cmt.reply === comment._id), comment]; // logic\n\n    const newPost = { ...post,\n      comments: post.comments.filter(cmt => !deleteArr.find(deletedCmt => cmt._id === deletedCmt._id))\n    };\n    let newPosts = [];\n\n    for (let i = 0; i < posts.length; i++) {\n      if (posts[i]._id === post._id) newPosts.push(newPost);else newPosts.push(posts[i]);\n    }\n\n    dispatch({\n      type: 'UPDATE_POST',\n      payload: newPosts\n    });\n    deleteArr.forEach(item => {\n      deleteAPI(`comment/${item._id}`, auth.token);\n    });\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const updateComment = (auth, body, post, posts) => dispatch => {\n  try {\n    const res = patchAPI(`comment/${item._id}`, body, auth.token);\n    console.log(res);\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["D:/Project Web/PROJECT 12 (Only MERN)/Client/client/src/store/actions/commentAction.js"],"names":["deleteAPI","patchAPI","postAPI","createComment","auth","newComment","post","posts","dispatch","data","postId","_id","postUserId","user","res","token","newData","newPost","comments","newPosts","i","length","push","type","payload","err","error","response","msg","deleteComment","comment","deleteArr","filter","cmt","reply","find","deletedCmt","forEach","item","updateComment","body","console","log"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,OAA9B,QAA6C,kBAA7C;AAEA,OAAO,MAAMC,aAAa,GAAG,CAACC,IAAD,EAAOC,UAAP,EAAmBC,IAAnB,EAAyBC,KAAzB,KAAmC,MAAOC,QAAP,IAAoB;AAChF,MAAI;AACA,UAAMC,IAAI,GAAG,EAAC,GAAGJ,UAAJ;AAAgBK,MAAAA,MAAM,EAAEJ,IAAI,CAACK,GAA7B;AAAkCC,MAAAA,UAAU,EAAEN,IAAI,CAACO,IAAL,CAAUF;AAAxD,KAAb;AACA,UAAMG,GAAG,GAAG,MAAMZ,OAAO,CAAC,SAAD,EAAYO,IAAZ,EAAkBL,IAAI,CAACW,KAAvB,CAAzB,CAFA,CAIA;;AACA,UAAMC,OAAO,GAAG,EAAC,GAAGF,GAAG,CAACL,IAAJ,CAASJ,UAAb;AAAyBQ,MAAAA,IAAI,EAAET,IAAI,CAACS;AAApC,KAAhB;AACA,UAAMI,OAAO,GAAG,EAAC,GAAGX,IAAJ;AAAUY,MAAAA,QAAQ,EAAE,CAAC,GAAGZ,IAAI,CAACY,QAAT,EAAmBF,OAAnB;AAApB,KAAhB;AAEA,QAAIG,QAAQ,GAAG,EAAf;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAACb,KAAK,CAACc,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACjC,UAAGb,KAAK,CAACa,CAAD,CAAL,CAAST,GAAT,KAAiBL,IAAI,CAACK,GAAzB,EAA8BQ,QAAQ,CAACG,IAAT,CAAcL,OAAd,EAA9B,KACKE,QAAQ,CAACG,IAAT,CAAcf,KAAK,CAACa,CAAD,CAAnB;AACR;;AAEDZ,IAAAA,QAAQ,CAAC;AAACe,MAAAA,IAAI,EAAE,aAAP;AAAsBC,MAAAA,OAAO,EAAEL;AAA/B,KAAD,CAAR;AAEH,GAjBD,CAiBE,OAAMM,GAAN,EAAW;AACTjB,IAAAA,QAAQ,CAAC;AAACe,MAAAA,IAAI,EAAE,OAAP;AAAgBC,MAAAA,OAAO,EAAE;AAACE,QAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAalB,IAAb,CAAkBmB;AAA1B;AAAzB,KAAD,CAAR;AACH;AACJ,CArBM;AAuBP,OAAO,MAAMC,aAAa,GAAG,CAACzB,IAAD,EAAO0B,OAAP,EAAgBxB,IAAhB,EAAsBC,KAAtB,KAAgC,MAAOC,QAAP,IAAoB;AAC7E,MAAI;AACA;AACA,UAAMuB,SAAS,GAAG,CAAC,GAAGzB,IAAI,CAACY,QAAL,CAAcc,MAAd,CAAqBC,GAAG,IAAEA,GAAG,CAACC,KAAJ,KAAYJ,OAAO,CAACnB,GAA9C,CAAJ,EAAwDmB,OAAxD,CAAlB,CAFA,CAGA;;AACA,UAAMb,OAAO,GAAG,EAAC,GAAGX,IAAJ;AAAUY,MAAAA,QAAQ,EAAEZ,IAAI,CAACY,QAAL,CAAcc,MAAd,CAAqBC,GAAG,IAAE,CAACF,SAAS,CAACI,IAAV,CAAeC,UAAU,IAAEH,GAAG,CAACtB,GAAJ,KAAUyB,UAAU,CAACzB,GAAhD,CAA3B;AAApB,KAAhB;AACA,QAAIQ,QAAQ,GAAG,EAAf;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAACb,KAAK,CAACc,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACjC,UAAGb,KAAK,CAACa,CAAD,CAAL,CAAST,GAAT,KAAiBL,IAAI,CAACK,GAAzB,EAA8BQ,QAAQ,CAACG,IAAT,CAAcL,OAAd,EAA9B,KACKE,QAAQ,CAACG,IAAT,CAAcf,KAAK,CAACa,CAAD,CAAnB;AACR;;AACDZ,IAAAA,QAAQ,CAAC;AAACe,MAAAA,IAAI,EAAE,aAAP;AAAsBC,MAAAA,OAAO,EAAEL;AAA/B,KAAD,CAAR;AAEAY,IAAAA,SAAS,CAACM,OAAV,CAAkBC,IAAI,IAAE;AACpBtC,MAAAA,SAAS,CAAE,WAAUsC,IAAI,CAAC3B,GAAI,EAArB,EAAwBP,IAAI,CAACW,KAA7B,CAAT;AACH,KAFD;AAIH,GAjBD,CAiBE,OAAMU,GAAN,EAAW;AACTjB,IAAAA,QAAQ,CAAC;AAACe,MAAAA,IAAI,EAAE,OAAP;AAAgBC,MAAAA,OAAO,EAAE;AAACE,QAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAalB,IAAb,CAAkBmB;AAA1B;AAAzB,KAAD,CAAR;AACH;AACJ,CArBM;AAuBP,OAAO,MAAMW,aAAa,GAAG,CAACnC,IAAD,EAAOoC,IAAP,EAAalC,IAAb,EAAmBC,KAAnB,KAA8BC,QAAD,IAAc;AACpE,MAAI;AACA,UAAMM,GAAG,GAAGb,QAAQ,CAAE,WAAUqC,IAAI,CAAC3B,GAAI,EAArB,EAAwB6B,IAAxB,EAA8BpC,IAAI,CAACW,KAAnC,CAApB;AACA0B,IAAAA,OAAO,CAACC,GAAR,CAAY5B,GAAZ;AAEH,GAJD,CAIE,OAAMW,GAAN,EAAW;AACTjB,IAAAA,QAAQ,CAAC;AAACe,MAAAA,IAAI,EAAE,OAAP;AAAgBC,MAAAA,OAAO,EAAE;AAACE,QAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAalB,IAAb,CAAkBmB;AAA1B;AAAzB,KAAD,CAAR;AACH;AACJ,CARM","sourcesContent":["import { deleteAPI, patchAPI, postAPI } from \"../../apis/Axios\";\r\n\r\nexport const createComment = (auth, newComment, post, posts) => async (dispatch) => {\r\n    try {\r\n        const data = {...newComment, postId: post._id, postUserId: post.user._id}\r\n        const res = await postAPI('comment', data, auth.token);\r\n\r\n        // logic\r\n        const newData = {...res.data.newComment, user: auth.user};\r\n        const newPost = {...post, comments: [...post.comments, newData]};\r\n\r\n        let newPosts = [];\r\n\r\n        for (let i = 0; i<posts.length; i++) {\r\n            if(posts[i]._id === post._id) newPosts.push(newPost);\r\n            else newPosts.push(posts[i]);\r\n        }\r\n\r\n        dispatch({type: 'UPDATE_POST', payload: newPosts});\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}});\r\n    }\r\n}\r\n\r\nexport const deleteComment = (auth, comment, post, posts) => async (dispatch) => {\r\n    try {\r\n        // delete the main and reply comments\r\n        const deleteArr = [...post.comments.filter(cmt=>cmt.reply===comment._id), comment];\r\n        // logic\r\n        const newPost = {...post, comments: post.comments.filter(cmt=>!deleteArr.find(deletedCmt=>cmt._id===deletedCmt._id))};\r\n        let newPosts = [];\r\n\r\n        for (let i = 0; i<posts.length; i++) {\r\n            if(posts[i]._id === post._id) newPosts.push(newPost);\r\n            else newPosts.push(posts[i])\r\n        }\r\n        dispatch({type: 'UPDATE_POST', payload: newPosts});\r\n\r\n        deleteArr.forEach(item=>{\r\n            deleteAPI(`comment/${item._id}`, auth.token);\r\n        })\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}});\r\n    }\r\n}\r\n\r\nexport const updateComment = (auth, body, post, posts) => (dispatch) => {\r\n    try {\r\n        const res = patchAPI(`comment/${item._id}`, body, auth.token);\r\n        console.log(res);\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}});\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}