{"ast":null,"code":"import { deleteAPI, getAPI, patchAPI, postAPI } from '../../apis/Axios';\nimport { imageUpload } from '../../apis/Cloudinary';\nimport { createNotice, deleteNotice } from './noticeAction';\nexport const createPost = (data, auth, socket) => async dispatch => {\n  let media = [];\n\n  try {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        loading: true\n      }\n    });\n    dispatch({\n      type: 'MODAL',\n      payload: true\n    });\n    if (data.image.length > 0) media = await imageUpload(data.image);\n    const res = await postAPI('post', {\n      body: data.body,\n      image: media\n    }, auth.token);\n    const newPost = { ...res.data.newPost,\n      user: auth.user\n    };\n    dispatch({\n      type: 'CREATE_POST',\n      payload: newPost\n    });\n    dispatch({\n      type: 'MODAL',\n      payload: false\n    });\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        success: res.data.msg\n      }\n    });\n    let msg = {\n      id: res.data.newPost._id,\n      receivers: newPost.user.followers,\n      url: `/post/${res.data.newPost._id}`,\n      body: data.body,\n      image: media.length > 0 ? media[0].url : ''\n    };\n    msg = { ...msg,\n      text: `${media.length > 0 ? 'add new image' : 'post a status'}`\n    };\n    dispatch(createNotice(auth, msg, socket));\n  } catch (err) {\n    dispatch({\n      type: 'MODAL',\n      payload: false\n    });\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getPosts = auth => async dispatch => {\n  try {\n    const res = await getAPI('post', auth.token);\n    dispatch({\n      type: 'GET_POSTS',\n      payload: res.data.posts\n    });\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const updatePost = (content, auth, id, profile) => async dispatch => {\n  try {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        loading: true\n      }\n    });\n    dispatch({\n      type: 'MODAL',\n      payload: true\n    });\n    const res = await patchAPI(`post/${id}`, {\n      body: content\n    }, auth.token); // logic\n\n    let newPosts = profile.posts.map(p => p._id === id ? res.data.newPost : p);\n    dispatch({\n      type: 'UPDATE_POST',\n      payload: newPosts\n    });\n    dispatch({\n      type: 'MODAL',\n      payload: false\n    });\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: 'MODAL',\n      payload: false\n    });\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const deletePost = (auth, id, profile, notices, socket) => async dispatch => {\n  const newPosts = profile.posts.filter(post => post._id !== id);\n  dispatch({\n    type: 'UPDATE_POST',\n    payload: newPosts\n  });\n\n  try {\n    const res = await deleteAPI(`post/${id}`, auth.token);\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        success: res.data.msg\n      }\n    });\n    const msg = {\n      id: id,\n      receivers: auth.user.followers.length > 0 && auth.user.followers,\n      url: `/post/${id}`\n    };\n    dispatch(deleteNotice(auth, msg, notices, socket));\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const likePost = (auth, post, profile, socket) => async dispatch => {\n  // logic\n  if (auth.user._id === post.user._id) return dispatch({\n    type: 'ALERT',\n    payload: {\n      warn: 'Dont like your own post! '\n    }\n  });\n  const newPost = { ...post,\n    likes: [...post.likes, auth.user]\n  };\n  let newPosts = profile.posts.map(p => p._id === post._id ? newPost : p);\n  dispatch({\n    type: 'UPDATE_POST',\n    payload: newPosts\n  });\n  socket.emit('likePost', newPost, newPosts);\n  const msg = {\n    id: newPost._id,\n    receivers: auth.user.followers,\n    text: 'like your post!',\n    url: `/post/${newPost._id}`,\n    body: newPost.body,\n    image: newPost.image.length > 0 ? newPost.image[0].url : ''\n  };\n  dispatch(createNotice(auth, msg, socket));\n\n  try {\n    const res = await patchAPI(`post/${post._id}/like`, newPost, auth.token);\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const unlikePost = (auth, post, profile, socket) => async dispatch => {\n  // logic\n  const newLikes = post.likes.filter(like => like._id !== auth.user._id);\n  const newPost = { ...post,\n    likes: newLikes\n  };\n  let newPosts = profile.posts.map(p => p._id === post._id ? newPost : p);\n  dispatch({\n    type: 'UPDATE_POST',\n    payload: newPosts\n  });\n  socket.emit('unlikePost', newPost, newPosts);\n\n  try {\n    const res = await patchAPI(`post/${post._id}/unlike`, null, auth.token);\n    const msg = {\n      id: post._id,\n      receivers: [post.user._id],\n      url: `/post/${post._id}`\n    };\n    dispatch(deleteNotice(auth, msg));\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["D:/Project Web/PROJECT 12 (Only MERN)/Client/client/src/store/actions/postAction.js"],"names":["deleteAPI","getAPI","patchAPI","postAPI","imageUpload","createNotice","deleteNotice","createPost","data","auth","socket","dispatch","media","type","payload","loading","image","length","res","body","token","newPost","user","success","msg","id","_id","receivers","followers","url","text","err","error","response","getPosts","posts","updatePost","content","profile","newPosts","map","p","deletePost","notices","filter","post","likePost","warn","likes","emit","unlikePost","newLikes","like"],"mappings":"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","sourcesContent":["import {deleteAPI, getAPI, patchAPI, postAPI} from '../../apis/Axios'\r\nimport {imageUpload} from '../../apis/Cloudinary'\r\nimport {createNotice, deleteNotice} from './noticeAction'\r\n\r\nexport const createPost = (data, auth, socket) => async (dispatch) => {\r\n    let media = [];\r\n    try {\r\n        dispatch({type: 'ALERT', payload: {loading: true}});\r\n        dispatch({type: 'MODAL' , payload: true});\r\n        if(data.image.length > 0) media = await imageUpload(data.image);\r\n\r\n        const res = await postAPI('post', {body: data.body,image: media}, auth.token);\r\n        const newPost = {...res.data.newPost, user: auth.user};\r\n        dispatch({type:'CREATE_POST', payload: newPost});\r\n        dispatch({type: 'MODAL' , payload: false});\r\n        dispatch({type: 'ALERT', payload: {success: res.data.msg}});\r\n\r\n        let msg = {\r\n            id: res.data.newPost._id,\r\n            receivers: newPost.user.followers,\r\n            url: `/post/${res.data.newPost._id}`,\r\n            body: data.body,\r\n            image: media.length>0 ? media[0].url : ''\r\n        }\r\n        msg = {...msg, text: `${media.length>0 ? 'add new image' : 'post a status'}`}\r\n\r\n        dispatch(createNotice(auth, msg, socket));\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'MODAL' , payload: false});\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const getPosts = (auth) => async (dispatch) => {\r\n    try {\r\n        const res = await getAPI('post', auth.token);\r\n        dispatch({type: 'GET_POSTS', payload: res.data.posts})\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const updatePost = (content, auth, id, profile) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: 'ALERT', payload: {loading: true} });\r\n        dispatch({type: 'MODAL' , payload: true});\r\n\r\n        const res = await patchAPI(`post/${id}`, {body: content}, auth.token);\r\n\r\n        // logic\r\n        let newPosts = profile.posts.map(p=>p._id===id?res.data.newPost:p);\r\n\r\n        dispatch({type: 'UPDATE_POST', payload: newPosts});\r\n        dispatch({ type: 'MODAL' , payload: false});\r\n        dispatch({ type: 'ALERT', payload: {success: res.data.msg} });\r\n\r\n    } catch(err) {\r\n        dispatch({ type: 'MODAL' , payload: false});\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const deletePost = (auth, id, profile, notices, socket) => async (dispatch) => {\r\n    const newPosts = profile.posts.filter(post => post._id !== id);\r\n    dispatch({type: 'UPDATE_POST', payload: newPosts});\r\n\r\n    try {\r\n        const res = await deleteAPI(`post/${id}`, auth.token);\r\n        dispatch({ type: 'ALERT', payload: {success: res.data.msg} });\r\n\r\n        const msg = {\r\n            id: id,\r\n            receivers: auth.user.followers.length>0 && auth.user.followers,\r\n            url: `/post/${id}`,\r\n        }\r\n        dispatch(deleteNotice(auth, msg, notices, socket));\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const likePost = (auth, post, profile, socket) => async (dispatch) => {\r\n    // logic\r\n    if(auth.user._id === post.user._id) return dispatch({type: 'ALERT', payload: {warn: 'Dont like your own post! '}});\r\n    const newPost = {...post, likes: [...post.likes, auth.user]};\r\n    let newPosts = profile.posts.map(p=>p._id===post._id?newPost:p);\r\n\r\n    dispatch({type: 'UPDATE_POST', payload: newPosts});\r\n    socket.emit('likePost', newPost, newPosts);\r\n\r\n    const msg = {\r\n        id: newPost._id,\r\n        receivers: auth.user.followers,\r\n        text: 'like your post!',\r\n        url: `/post/${newPost._id}`,\r\n        body: newPost.body,\r\n        image: newPost.image.length>0 ? newPost.image[0].url : ''\r\n    }\r\n    dispatch(createNotice(auth, msg, socket));\r\n\r\n    try {\r\n        const res = await patchAPI(`post/${post._id}/like`, newPost, auth.token);\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const unlikePost = (auth, post, profile, socket) => async (dispatch) => {\r\n    // logic\r\n    const newLikes = post.likes.filter(like => like._id !== auth.user._id)\r\n    const newPost = {...post, likes: newLikes};\r\n    let newPosts = profile.posts.map(p=>p._id===post._id?newPost:p);\r\n\r\n    dispatch({type: 'UPDATE_POST', payload: newPosts});\r\n    socket.emit('unlikePost', newPost, newPosts);\r\n\r\n    try {\r\n        const res = await patchAPI(`post/${post._id}/unlike`, null, auth.token);\r\n        const msg = {\r\n            id: post._id,\r\n            receivers: [post.user._id],\r\n            url: `/post/${post._id}`,\r\n        }\r\n    \r\n        dispatch(deleteNotice(auth, msg))\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}