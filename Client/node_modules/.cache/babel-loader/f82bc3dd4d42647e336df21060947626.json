{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project Web\\\\Project Web\\\\PROJECT 12 (Only MERN)\\\\Client\\\\client\\\\src\\\\components\\\\util\\\\InfiniteList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getAPI } from '../../apis/Axios';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst InfiniteList = ({\n  list,\n  elem,\n  id,\n  children,\n  api,\n  action\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    auth\n  } = useSelector(state => state);\n  const [page, setPage] = useState(1);\n  const [load, setLoad] = useState(false);\n\n  const getData = () => {\n    setPage(page + 1);\n    setLoad(true);\n  };\n\n  useEffect(async () => {\n    if (load) {\n      const res = await getAPI(`${api}${id && `/${id}`}?page=${page}`, auth.token);\n      setLoad(false);\n      if (res.data.codes.length === 0) return;\n      dispatch({\n        type: `${action}`,\n        payload: res.data.codes\n      });\n    }\n  }, [load]);\n  return /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n    dataLength: list.length,\n    next: getData,\n    hasMore: true,\n    scrollableTarget: elem,\n    style: {\n      padding: '0 70px',\n      margin: '0 -70px'\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n\n_s(InfiniteList, \"Mb6FGijXylBXTeMUXZ5CI13Z3F4=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = InfiniteList;\nexport default InfiniteList;\n\nvar _c;\n\n$RefreshReg$(_c, \"InfiniteList\");","map":{"version":3,"sources":["D:/Project Web/Project Web/PROJECT 12 (Only MERN)/Client/client/src/components/util/InfiniteList.js"],"names":["React","useEffect","useState","useDispatch","useSelector","getAPI","InfiniteScroll","InfiniteList","list","elem","id","children","api","action","dispatch","auth","state","page","setPage","load","setLoad","getData","res","token","data","codes","length","type","payload","padding","margin"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,MAAT,QAAuB,kBAAvB;AAEA,OAAOC,cAAP,MAA2B,iCAA3B;;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA,IAAP;AAAaC,EAAAA,EAAb;AAAiBC,EAAAA,QAAjB;AAA2BC,EAAAA,GAA3B;AAAgCC,EAAAA;AAAhC,CAAD,KAA6C;AAAA;;AAC9D,QAAMC,QAAQ,GAAGX,WAAW,EAA5B;AACA,QAAM;AAACY,IAAAA;AAAD,MAASX,WAAW,CAACY,KAAK,IAAEA,KAAR,CAA1B;AAEA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBhB,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACiB,IAAD,EAAOC,OAAP,IAAkBlB,QAAQ,CAAC,KAAD,CAAhC;;AAEA,QAAMmB,OAAO,GAAG,MAAM;AAClBH,IAAAA,OAAO,CAACD,IAAI,GAAC,CAAN,CAAP;AACAG,IAAAA,OAAO,CAAC,IAAD,CAAP;AACH,GAHD;;AAKAnB,EAAAA,SAAS,CAAE,YAAU;AACjB,QAAGkB,IAAH,EAAS;AACL,YAAMG,GAAG,GAAG,MAAMjB,MAAM,CAAE,GAAEO,GAAI,GAAEF,EAAE,IAAG,IAAGA,EAAG,EAAE,SAAQO,IAAK,EAApC,EAAuCF,IAAI,CAACQ,KAA5C,CAAxB;AAEAH,MAAAA,OAAO,CAAC,KAAD,CAAP;AAEA,UAAGE,GAAG,CAACE,IAAJ,CAASC,KAAT,CAAeC,MAAf,KAAwB,CAA3B,EAA8B;AAE9BZ,MAAAA,QAAQ,CAAC;AAACa,QAAAA,IAAI,EAAG,GAAEd,MAAO,EAAjB;AAAoBe,QAAAA,OAAO,EAAEN,GAAG,CAACE,IAAJ,CAASC;AAAtC,OAAD,CAAR;AACH;AACJ,GAVQ,EAUP,CAACN,IAAD,CAVO,CAAT;AAYA,sBACI,QAAC,cAAD;AACI,IAAA,UAAU,EAAEX,IAAI,CAACkB,MADrB;AAEI,IAAA,IAAI,EAAEL,OAFV;AAGI,IAAA,OAAO,EAAE,IAHb;AAII,IAAA,gBAAgB,EAAEZ,IAJtB;AAKI,IAAA,KAAK,EAAE;AAACoB,MAAAA,OAAO,EAAE,QAAV;AAAoBC,MAAAA,MAAM,EAAE;AAA5B,KALX;AAAA,cAOKnB;AAPL;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CAnCD;;GAAMJ,Y;UACeJ,W,EACFC,W;;;KAFbG,Y;AAqCN,eAAeA,YAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { getAPI } from '../../apis/Axios'\r\n\r\nimport InfiniteScroll from 'react-infinite-scroll-component'\r\n\r\nconst InfiniteList = ({list, elem, id, children, api, action}) => {\r\n    const dispatch = useDispatch();\r\n    const {auth} = useSelector(state=>state);\r\n\r\n    const [page, setPage] = useState(1);\r\n    const [load, setLoad] = useState(false);\r\n\r\n    const getData = () => {\r\n        setPage(page+1);\r\n        setLoad(true);\r\n    }\r\n\r\n    useEffect( async ()=>{\r\n        if(load) {\r\n            const res = await getAPI(`${api}${id&&`/${id}`}?page=${page}`, auth.token)\r\n            \r\n            setLoad(false)\r\n\r\n            if(res.data.codes.length===0) return;\r\n\r\n            dispatch({type: `${action}`, payload: res.data.codes})\r\n        }\r\n    },[load])\r\n\r\n    return (\r\n        <InfiniteScroll\r\n            dataLength={list.length}\r\n            next={getData}\r\n            hasMore={true}\r\n            scrollableTarget={elem}\r\n            style={{padding: '0 70px', margin: '0 -70px'}}\r\n        >\r\n            {children}\r\n        </InfiniteScroll>  \r\n    )\r\n}\r\n\r\nexport default InfiniteList\r\n"]},"metadata":{},"sourceType":"module"}