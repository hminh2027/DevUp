{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project Web\\\\PROJECT 12 (Only MERN)\\\\Client\\\\client\\\\src\\\\components\\\\customRouter\\\\PageRender.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useParams, useHistory } from 'react-router-dom';\nimport PageNotFound from '../../views/PageNotFound/PageNotFound';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PageRender = () => {\n  _s();\n\n  const {\n    page,\n    id\n  } = useParams();\n  const history = useHistory();\n  const {\n    auth\n  } = useSelector(state => state);\n  const [notFound, setFound] = useState(false);\n  let pageName = '';\n  if (auth.token) pageName = `${page}`; // axios.interceptors.response.use(undefined, error=>{\n  //     const {status, data, config} = error.response;\n  //     if(status === 404) {\n  //         setFound(true);\n  //     }\n  //     if(status === 500) {\n  //       console.log('server error')\n  //     }\n  // })\n\n  return generatePage(pageName, id, notFound);\n};\n\n_s(PageRender, \"O4p6u3tdEsa0Ie0fpSx5O7Nk7OA=\", false, function () {\n  return [useParams, useHistory, useSelector];\n});\n\n_c = PageRender;\n\nconst generatePage = (pageName, id, notFound) => {\n  const page = pageName.charAt(0).toUpperCase() + pageName.slice(1);\n\n  const component = () => require(`../../views/${page}/${page}`).default;\n\n  try {\n    return /*#__PURE__*/React.createElement(component());\n  } catch (err) {\n    return /*#__PURE__*/_jsxDEV(PageNotFound, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 16\n    }, this);\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"PageRender\");","map":{"version":3,"sources":["D:/Project Web/PROJECT 12 (Only MERN)/Client/client/src/components/customRouter/PageRender.js"],"names":["React","useState","useSelector","useParams","useHistory","PageNotFound","axios","PageRender","page","id","history","auth","state","notFound","setFound","pageName","token","generatePage","charAt","toUpperCase","slice","component","require","default","createElement","err"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,kBAAtC;AACA,OAAOC,YAAP,MAAyB,uCAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAAA;;AAC5B,QAAM;AAACC,IAAAA,IAAD;AAAMC,IAAAA;AAAN,MAAYN,SAAS,EAA3B;AACA,QAAMO,OAAO,GAAGN,UAAU,EAA1B;AACA,QAAM;AAACO,IAAAA;AAAD,MAAST,WAAW,CAACU,KAAK,IAAEA,KAAR,CAA1B;AACA,QAAM,CAACC,QAAD,EAAWC,QAAX,IAAuBb,QAAQ,CAAC,KAAD,CAArC;AAEA,MAAIc,QAAQ,GAAG,EAAf;AACA,MAAGJ,IAAI,CAACK,KAAR,EAAeD,QAAQ,GAAI,GAAEP,IAAK,EAAnB,CAPa,CAS5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SACIS,YAAY,CAACF,QAAD,EAAWN,EAAX,EAAeI,QAAf,CADhB;AAGH,CAtBM;;GAAMN,U;UACSJ,S,EACFC,U,EACDF,W;;;KAHNK,U;;AAwBb,MAAMU,YAAY,GAAG,CAACF,QAAD,EAAWN,EAAX,EAAeI,QAAf,KAA4B;AAC7C,QAAML,IAAI,GAAGO,QAAQ,CAACG,MAAT,CAAgB,CAAhB,EAAmBC,WAAnB,KAAmCJ,QAAQ,CAACK,KAAT,CAAe,CAAf,CAAhD;;AACA,QAAOC,SAAS,GAAG,MAAMC,OAAO,CAAE,eAAcd,IAAK,IAAGA,IAAK,EAA7B,CAAP,CAAuCe,OAAhE;;AAEA,MAAI;AACA,wBAAOvB,KAAK,CAACwB,aAAN,CAAoBH,SAAS,EAA7B,CAAP;AAEH,GAHD,CAGE,OAAOI,GAAP,EAAY;AACV,wBAAO,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;AACJ,CAVD","sourcesContent":["import React, {useState} from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport PageNotFound from '../../views/PageNotFound/PageNotFound';\r\nimport axios from 'axios';\r\n\r\nexport const PageRender = () => {\r\n    const {page,id} = useParams();\r\n    const history = useHistory()\r\n    const {auth} = useSelector(state=>state);\r\n    const [notFound, setFound] = useState(false);\r\n\r\n    let pageName = '';\r\n    if(auth.token) pageName = `${page}`;\r\n\r\n    // axios.interceptors.response.use(undefined, error=>{\r\n    //     const {status, data, config} = error.response;\r\n    //     if(status === 404) {\r\n    //         setFound(true);\r\n    //     }\r\n    //     if(status === 500) {\r\n    //       console.log('server error')\r\n    //     }\r\n    // })\r\n\r\n    return (\r\n        generatePage(pageName, id, notFound)  \r\n    )\r\n}\r\n\r\nconst generatePage = (pageName, id, notFound) => {\r\n    const page = pageName.charAt(0).toUpperCase() + pageName.slice(1);\r\n    const  component = () => require(`../../views/${page}/${page}`).default;\r\n\r\n    try {\r\n        return React.createElement(component());\r\n\r\n    } catch (err) {\r\n        return <PageNotFound/>\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}