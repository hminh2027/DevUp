{"ast":null,"code":"import { deleteAPI, getAPI, patchAPI, postAPI } from '../../apis/Axios';\nimport { imageUpload } from '../../apis/Cloudinary';\nexport const createPost = (data, auth) => async dispatch => {\n  let media = [];\n\n  try {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        loading: true\n      }\n    });\n    dispatch({\n      type: 'MODAL',\n      payload: true\n    });\n    if (data.image.length > 0) media = await imageUpload(data.image);\n    const res = await postAPI('post', {\n      body: data.body,\n      image: media\n    }, auth.token);\n    const newPost = { ...res.data.newPost,\n      user: auth.user\n    };\n    dispatch({\n      type: 'CREATE_POST',\n      payload: newPost\n    });\n    dispatch({\n      type: 'MODAL',\n      payload: false\n    });\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        success: res.data.msg\n      }\n    }); // const msg = {\n    //     id: res.data.newPost._id,\n    //     text: 'add a new post!',\n    //     receivers: res.data.newPost.user.followers,\n    //     url: `/post/${res.data.newPost._id}`,\n    //     body: data.body,\n    //     image: media[0].url\n    // }\n    // dispatch(createNotice(auth, msg, socket));\n  } catch (err) {\n    dispatch({\n      type: 'MODAL',\n      payload: false\n    });\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getPosts = auth => async dispatch => {\n  try {\n    const res = await getAPI('post', auth.token);\n    dispatch({\n      type: 'GET_POSTS',\n      payload: res.data.posts\n    });\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const updatePost = (content, auth, id, profile) => async dispatch => {\n  try {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        loading: true\n      }\n    });\n    dispatch({\n      type: 'MODAL',\n      payload: true\n    });\n    const res = await patchAPI(`post/${id}`, {\n      body: content\n    }, auth.token); // logic\n\n    let newPosts = profile.posts.map(p => p._id === id ? res.data.newPost : p);\n    dispatch({\n      type: 'UPDATE_POST',\n      payload: newPosts\n    });\n    dispatch({\n      type: 'MODAL',\n      payload: false\n    });\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: 'MODAL',\n      payload: false\n    });\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const deletePost = (auth, id, profile) => async dispatch => {\n  const newPosts = profile.posts.filter(post => post._id !== id);\n  dispatch({\n    type: 'UPDATE_POST',\n    payload: newPosts\n  });\n\n  try {\n    const res = await deleteAPI(`post/${id}`, auth.token);\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const likePost = (auth, post, profile, socket) => async dispatch => {\n  // logic\n  if (auth.user._id === post.user._id) return dispatch({\n    type: 'ALERT',\n    payload: {\n      warn: 'Dont like your own post! '\n    }\n  });\n  const newPost = { ...post,\n    likes: [...post.likes, auth.user]\n  };\n  let newPosts = profile.posts.map(p => p._id === post._id ? newPost : p);\n  dispatch({\n    type: 'UPDATE_POST',\n    payload: newPosts\n  });\n  socket.emit('likePost', newPost, newPosts);\n\n  try {\n    const res = await patchAPI(`post/${post._id}/like`, newPost, auth.token);\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const unlikePost = (auth, post, profile, socket) => async dispatch => {\n  // logic\n  const newLikes = post.likes.filter(like => like._id !== auth.user._id);\n  const newPost = { ...post,\n    likes: newLikes\n  };\n  let newPosts = profile.posts.map(p => p._id === post._id ? newPost : p);\n  dispatch({\n    type: 'UPDATE_POST',\n    payload: newPosts\n  });\n  socket.emit('unlikePost', newPost, newPosts);\n\n  try {\n    const res = await patchAPI(`post/${post._id}/unlike`, null, auth.token);\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["D:/Project Web/PROJECT 12 (Only MERN)/Client/client/src/store/actions/postAction.js"],"names":["deleteAPI","getAPI","patchAPI","postAPI","imageUpload","createPost","data","auth","dispatch","media","type","payload","loading","image","length","res","body","token","newPost","user","success","msg","err","error","response","getPosts","posts","updatePost","content","id","profile","newPosts","map","p","_id","deletePost","filter","post","likePost","socket","warn","likes","emit","unlikePost","newLikes","like"],"mappings":"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","sourcesContent":["import {deleteAPI, getAPI, patchAPI, postAPI} from '../../apis/Axios';\r\nimport {imageUpload} from '../../apis/Cloudinary';\r\n\r\nexport const createPost = (data,auth) => async (dispatch) => {\r\n    let media = [];\r\n    try {\r\n        dispatch({type: 'ALERT', payload: {loading: true}});\r\n        dispatch({type: 'MODAL' , payload: true});\r\n        if(data.image.length > 0) media = await imageUpload(data.image);\r\n\r\n        const res = await postAPI('post', {body: data.body,image: media}, auth.token);\r\n        const newPost = {...res.data.newPost, user: auth.user};\r\n        dispatch({type:'CREATE_POST', payload: newPost});\r\n        dispatch({type: 'MODAL' , payload: false});\r\n        dispatch({type: 'ALERT', payload: {success: res.data.msg}});\r\n\r\n        // const msg = {\r\n        //     id: res.data.newPost._id,\r\n        //     text: 'add a new post!',\r\n        //     receivers: res.data.newPost.user.followers,\r\n        //     url: `/post/${res.data.newPost._id}`,\r\n        //     body: data.body,\r\n        //     image: media[0].url\r\n        // }\r\n\r\n        // dispatch(createNotice(auth, msg, socket));\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'MODAL' , payload: false});\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const getPosts = (auth) => async (dispatch) => {\r\n    try {\r\n        const res = await getAPI('post', auth.token);\r\n        dispatch({type: 'GET_POSTS', payload: res.data.posts})\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const updatePost = (content, auth, id, profile) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: 'ALERT', payload: {loading: true} });\r\n        dispatch({type: 'MODAL' , payload: true});\r\n\r\n        const res = await patchAPI(`post/${id}`, {body: content}, auth.token);\r\n\r\n        // logic\r\n        let newPosts = profile.posts.map(p=>p._id===id?res.data.newPost:p);\r\n\r\n        dispatch({type: 'UPDATE_POST', payload: newPosts});\r\n        dispatch({ type: 'MODAL' , payload: false});\r\n        dispatch({ type: 'ALERT', payload: {success: res.data.msg} });\r\n\r\n    } catch(err) {\r\n        dispatch({ type: 'MODAL' , payload: false});\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const deletePost = (auth, id, profile) => async (dispatch) => {\r\n    const newPosts = profile.posts.filter(post => post._id !== id);\r\n    dispatch({type: 'UPDATE_POST', payload: newPosts});\r\n\r\n    try {\r\n        const res = await deleteAPI(`post/${id}`, auth.token);\r\n        dispatch({ type: 'ALERT', payload: {success: res.data.msg} });\r\n\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const likePost = (auth, post, profile, socket) => async (dispatch) => {\r\n    // logic\r\n    if(auth.user._id === post.user._id) return dispatch({type: 'ALERT', payload: {warn: 'Dont like your own post! '}});\r\n    const newPost = {...post, likes: [...post.likes, auth.user]};\r\n    let newPosts = profile.posts.map(p=>p._id===post._id?newPost:p);\r\n\r\n    dispatch({type: 'UPDATE_POST', payload: newPosts});\r\n    socket.emit('likePost', newPost, newPosts);\r\n\r\n\r\n    try {\r\n        const res = await patchAPI(`post/${post._id}/like`, newPost, auth.token);\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const unlikePost = (auth, post, profile, socket) => async (dispatch) => {\r\n    // logic\r\n    const newLikes = post.likes.filter(like => like._id !== auth.user._id)\r\n    const newPost = {...post, likes: newLikes};\r\n    let newPosts = profile.posts.map(p=>p._id===post._id?newPost:p);\r\n\r\n    dispatch({type: 'UPDATE_POST', payload: newPosts});\r\n    socket.emit('unlikePost', newPost, newPosts);\r\n\r\n    try {\r\n        const res = await patchAPI(`post/${post._id}/unlike`, null, auth.token);\r\n\r\n    } catch(err) {\r\n        dispatch({type: 'ALERT', payload: {error: err.response.data.msg}})\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}