{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project Web\\\\PROJECT 12 (Only MERN)\\\\Client\\\\client\\\\src\\\\components\\\\util\\\\Cropper.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport styles from './Cropper.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Cropper = ({\n  src,\n  setImage,\n  setCropImage\n}) => {\n  _s();\n\n  const [crop, setCrop] = useState({\n    aspect: 1 / 1\n  });\n  const [image, setLocalImage] = useState(null);\n  const [link, setLink] = useState(null);\n  useEffect(() => {\n    setLink(URL.createObjectURL(src));\n  }, [src]);\n\n  function getCroppedImg() {\n    const canvas = document.createElement(\"canvas\");\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext(\"2d\"); // New lines to be added\n\n    const pixelRatio = window.devicePixelRatio;\n    canvas.width = crop.width * pixelRatio;\n    canvas.height = crop.height * pixelRatio;\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n    ctx.imageSmoothingQuality = \"high\";\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n    canvas.toBlob(blob => setImage({ ...image,\n      avatar: blob\n    }));\n    setCropImage(null);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.crop_heading,\n      children: \"Crop Image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ReactCrop, {\n      className: styles.crop_img,\n      crop: crop,\n      src: link,\n      onChange: setCrop,\n      onImageLoaded: setLocalImage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: getCroppedImg,\n      className: styles.crop_btn,\n      children: \"Crop\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Cropper, \"yp1mHCoL5WRYA+gDU7WpW3IJ2/A=\");\n\n_c = Cropper;\nexport default Cropper;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cropper\");","map":{"version":3,"sources":["D:/Project Web/PROJECT 12 (Only MERN)/Client/client/src/components/util/Cropper.js"],"names":["React","useEffect","useState","ReactCrop","styles","Cropper","src","setImage","setCropImage","crop","setCrop","aspect","image","setLocalImage","link","setLink","URL","createObjectURL","getCroppedImg","canvas","document","createElement","scaleX","naturalWidth","width","scaleY","naturalHeight","height","ctx","getContext","pixelRatio","window","devicePixelRatio","setTransform","imageSmoothingQuality","drawImage","x","y","toBlob","blob","avatar","container","crop_heading","crop_img","crop_btn"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport ReactCrop from 'react-image-crop';\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\nimport styles from './Cropper.module.css'\r\n\r\nconst Cropper = ({ src, setImage, setCropImage }) => {\r\n    const [crop, setCrop] = useState({aspect: 1/1});\r\n    const [image, setLocalImage] = useState(null);\r\n    const [link, setLink] = useState(null);\r\n    \r\n    useEffect(()=>{\r\n        setLink(URL.createObjectURL(src))\r\n    },[src])\r\n\r\n    function getCroppedImg() {\r\n        const canvas = document.createElement(\"canvas\");\r\n        const scaleX = image.naturalWidth / image.width;\r\n        const scaleY = image.naturalHeight / image.height;\r\n        canvas.width = crop.width;\r\n        canvas.height = crop.height;\r\n        const ctx = canvas.getContext(\"2d\");\r\n      \r\n        // New lines to be added\r\n        const pixelRatio = window.devicePixelRatio;\r\n        canvas.width = crop.width * pixelRatio;\r\n        canvas.height = crop.height * pixelRatio;\r\n        ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\r\n        ctx.imageSmoothingQuality = \"high\";\r\n      \r\n        ctx.drawImage(\r\n          image,\r\n          crop.x * scaleX,\r\n          crop.y * scaleY,\r\n          crop.width * scaleX,\r\n          crop.height * scaleY,\r\n          0,\r\n          0,\r\n          crop.width,\r\n          crop.height\r\n        );\r\n        canvas.toBlob(\r\n            (blob) => setImage({...image,avatar: blob})\r\n        );\r\n        setCropImage(null);\r\n    }\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.crop_heading}>Crop Image</div>\r\n            <ReactCrop className={styles.crop_img} crop={crop} src={link} onChange={setCrop} onImageLoaded={setLocalImage} />\r\n            <div onClick={getCroppedImg} className={styles.crop_btn}>Crop</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cropper\r\n"]},"metadata":{},"sourceType":"module"}