{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project Web\\\\PROJECT 12 (Only MERN)\\\\Client\\\\client\\\\src\\\\components\\\\customRouter\\\\PageRender.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport PageNotFound from '../../views/PageNotFound/PageNotFound';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst generatePage = (pageName, id) => {\n  const page = pageName.charAt(0).toUpperCase() + pageName.slice(1);\n\n  const component = () => require(`../../views/${page}/${page}`).default;\n\n  const err = errorHandler();\n  if (err) return /*#__PURE__*/_jsxDEV(PageNotFound, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 20\n  }, this);\n\n  try {\n    return /*#__PURE__*/React.createElement(component());\n  } catch (err) {\n    return /*#__PURE__*/_jsxDEV(PageNotFound, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 16\n    }, this);\n  }\n};\n\nconst errorHandler = () => {\n  axios.interceptors.response.use(undefined, error => {\n    const {\n      status,\n      data,\n      config\n    } = error.response;\n\n    if (status === 404) {\n      return status;\n    }\n\n    if (status === 500) {\n      console.log('server error');\n    }\n\n    return Promise.reject(error);\n  });\n};\n\nexport const PageRender = () => {\n  _s();\n\n  const {\n    page,\n    id\n  } = useParams();\n  const {\n    auth\n  } = useSelector(state => state);\n  let pageName = '';\n  if (auth.token) pageName = `${page}`;\n  return generatePage(pageName, id);\n};\n\n_s(PageRender, \"itb/9fCdRxBHv2BgFryBixek2Nc=\", false, function () {\n  return [useParams, useSelector];\n});\n\n_c = PageRender;\n\nvar _c;\n\n$RefreshReg$(_c, \"PageRender\");","map":{"version":3,"sources":["D:/Project Web/PROJECT 12 (Only MERN)/Client/client/src/components/customRouter/PageRender.js"],"names":["React","useSelector","useParams","PageNotFound","generatePage","pageName","id","page","charAt","toUpperCase","slice","component","require","default","err","errorHandler","createElement","axios","interceptors","response","use","undefined","error","status","data","config","console","log","Promise","reject","PageRender","auth","state","token"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,YAAP,MAAyB,uCAAzB;;;AAEA,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAUC,EAAV,KAAiB;AAClC,QAAMC,IAAI,GAAGF,QAAQ,CAACG,MAAT,CAAgB,CAAhB,EAAmBC,WAAnB,KAAmCJ,QAAQ,CAACK,KAAT,CAAe,CAAf,CAAhD;;AACA,QAAOC,SAAS,GAAG,MAAMC,OAAO,CAAE,eAAcL,IAAK,IAAGA,IAAK,EAA7B,CAAP,CAAuCM,OAAhE;;AAEA,QAAMC,GAAG,GAAGC,YAAY,EAAxB;AACA,MAAGD,GAAH,EAAQ,oBAAO,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,UAAP;;AAER,MAAI;AACA,wBAAOd,KAAK,CAACgB,aAAN,CAAoBL,SAAS,EAA7B,CAAP;AAEH,GAHD,CAGE,OAAOG,GAAP,EAAY;AACV,wBAAO,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;AACJ,CAbD;;AAeA,MAAMC,YAAY,GAAG,MAAM;AACvBE,EAAAA,KAAK,CAACC,YAAN,CAAmBC,QAAnB,CAA4BC,GAA5B,CAAgCC,SAAhC,EAA2CC,KAAK,IAAE;AAC9C,UAAM;AAACC,MAAAA,MAAD;AAASC,MAAAA,IAAT;AAAeC,MAAAA;AAAf,QAAyBH,KAAK,CAACH,QAArC;;AACA,QAAGI,MAAM,KAAK,GAAd,EAAmB;AACjB,aAAOA,MAAP;AACD;;AACD,QAAGA,MAAM,KAAK,GAAd,EAAmB;AACjBG,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACD;;AAED,WAAOC,OAAO,CAACC,MAAR,CAAeP,KAAf,CAAP;AACD,GAVH;AAWH,CAZD;;AAcA,OAAO,MAAMQ,UAAU,GAAG,MAAM;AAAA;;AAC5B,QAAM;AAACvB,IAAAA,IAAD;AAAMD,IAAAA;AAAN,MAAYJ,SAAS,EAA3B;AACA,QAAM;AAAC6B,IAAAA;AAAD,MAAS9B,WAAW,CAAC+B,KAAK,IAAEA,KAAR,CAA1B;AAEA,MAAI3B,QAAQ,GAAG,EAAf;AACA,MAAG0B,IAAI,CAACE,KAAR,EAAe5B,QAAQ,GAAI,GAAEE,IAAK,EAAnB;AAIf,SACIH,YAAY,CAACC,QAAD,EAAUC,EAAV,CADhB;AAGH,CAZM;;GAAMwB,U;UACS5B,S,EACHD,W;;;KAFN6B,U","sourcesContent":["import React from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\nimport PageNotFound from '../../views/PageNotFound/PageNotFound';\r\n\r\nconst generatePage = (pageName,id) => {\r\n    const page = pageName.charAt(0).toUpperCase() + pageName.slice(1);\r\n    const  component = () => require(`../../views/${page}/${page}`).default;\r\n\r\n    const err = errorHandler();\r\n    if(err) return <PageNotFound/>\r\n\r\n    try {\r\n        return React.createElement(component());\r\n\r\n    } catch (err) {\r\n        return <PageNotFound/>\r\n    }\r\n}\r\n\r\nconst errorHandler = () => {\r\n    axios.interceptors.response.use(undefined, error=>{\r\n        const {status, data, config} = error.response;\r\n        if(status === 404) {\r\n          return status;\r\n        }\r\n        if(status === 500) {\r\n          console.log('server error')\r\n        }\r\n        \r\n        return Promise.reject(error)\r\n      })\r\n}\r\n\r\nexport const PageRender = () => {\r\n    const {page,id} = useParams();\r\n    const {auth} = useSelector(state=>state);\r\n\r\n    let pageName = '';\r\n    if(auth.token) pageName = `${page}`;\r\n\r\n\r\n\r\n    return (\r\n        generatePage(pageName,id)  \r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}